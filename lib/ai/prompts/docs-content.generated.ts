// @ts-nocheck
export default "This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.\n\n================================================================\nFile Summary\n================================================================\n\nPurpose:\n--------\nThis file contains a packed representation of the entire repository's contents.\nIt is designed to be easily consumable by AI systems for analysis, code review,\nor other automated processes.\n\nFile Format:\n------------\nThe content is organized as follows:\n1. This summary section\n2. Repository information\n3. Directory structure\n4. Multiple file entries, each consisting of:\n  a. A separator line (================)\n  b. The file path (File: path/to/file)\n  c. Another separator line\n  d. The full contents of the file\n  e. A blank line\n\nUsage Guidelines:\n-----------------\n- This file should be treated as read-only. Any changes should be made to the\n  original repository files, not this packed version.\n- When processing this file, use the file path to distinguish\n  between different files in the repository.\n- Be aware that this file may contain sensitive information. Handle it with\n  the same level of security as you would the original repository.\n\nNotes:\n------\n- Some files may have been excluded based on .gitignore rules and Repomix's configuration\n- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files\n- Only files matching these patterns are included: **/*.md, **/*.mdx\n- Files matching patterns in .gitignore are excluded\n- Files matching default ignore patterns are excluded\n\nAdditional Info:\n----------------\n\n================================================================\nDirectory Structure\n================================================================\ndocs/\n  advanced/\n    math-utils.mdx\n    units.md\n  building-electronics/\n    designing-electronics-from-scratch.md\n    ordering-prototypes.mdx\n    what-are-electronics-made-of.mdx\n  command-line/\n    tsci-add.mdx\n    tsci-dev.md\n    tsci-export.md\n    tsci-init.md\n    tsci-login.md\n  contributing/\n    bounties-and-sponsorship.md\n    getting-started-as-a-contributor.md\n    overview-of-projects.md\n    the-contributor-handbook.md\n  elements/\n    board.mdx\n    capacitor.mdx\n    chip.mdx\n    crystal.mdx\n    diode.mdx\n    footprint.mdx\n    group.mdx\n    hole.mdx\n    led.mdx\n    mosfet.mdx\n    net.mdx\n    pinheader.mdx\n    potentiometer.mdx\n    pushbutton.mdx\n    resistor.mdx\n    resonator.mdx\n    subcircuit.mdx\n    switch.mdx\n    trace.mdx\n    transistor.mdx\n    via.mdx\n  footprints/\n    constraint.mdx\n    footprint-elements-vs-footprint-strings.mdx\n    platedhole.mdx\n    silkscreenline.mdx\n    silkscreenpath.mdx\n    silkscreentext.mdx\n    smtpad.mdx\n  guides/\n    importing-modules-and-chips/\n      importing-from-circuit-json.mdx\n      importing-from-jlcpcb.mdx\n      importing-from-kicad.md\n    automatic-layout.mdx\n    configuring-chips.mdx\n    displaying-circuit-json-on-a-webpage.mdx\n    essential-elements.mdx\n    layout-properties.mdx\n    manual-edits.mdx\n    platform-configuration.md\n    port-and-net-selectors.md\n    programmatically-building-circuits.md\n    publishing-modules.md\n    running-tscircuit-inside-an-iframe.mdx\n    understanding-fabrication-files.md\n    using-sel-references.mdx\n    using-tscircuit-without-react.mdx\n  intro/\n    installation.md\n    quickstart-cli.md\n    quickstart-web.md\n    what-is-tscircuit.mdx\n  tutorials/\n    building-a-simple-usb-flashlight.md\n  web-apis/\n    autorouting-api.mdx\n    the-registry-api.md\nREADME.md\n\n================================================================\nFiles\n================================================================\n\n================\nFile: docs/advanced/math-utils.mdx\n================\n---\ntitle: Math Utils\n---\n\n## Overview\n\nThe `@tscircuit/math-utils` package provides a set of utilities that are\ncommonly used in circuit design. The `@tscircuit/math-utils` package is\ngenerally available in any platform that uses `tscircuit`.\n\nThe source code for the `@tscircuit/math-utils` package [is available here](https://github.com/tscircuit/math-utils)\n\n\n## `grid`\n\nA utility function that generates a grid of cells with configurable dimensions, spacing, and positioning. Each cell contains its index, position (row/column), and coordinate points (center, top-left, bottom-right).\n\n```tsx\nimport { grid } from \"@tscircuit/math-utils\"\n\nconst gridCells = grid({\n  rows: 3,\n  cols: 3,\n  width: 300,   // optional\n  height: 300,  // optional\n  xSpacing: 100,  // optional, default: 1\n  ySpacing: 100,  // optional, default: 1\n  offsetX: 0,     // optional, default: 0\n  offsetY: 0,     // optional, default: 0\n  yDirection: \"cartesian\", // optional, default: \"cartesian\"\n  centered: true  // optional, default: true\n})\n\nexport default () => (\n  <board width=\"30mm\" height=\"30mm\">\n    {gridCells.map((cell) => (\n      <led\n        name={`LED${cell.index}`}\n        footprint=\"led_0402\"\n        schX={cell.center.x}\n        schY={cell.center.y}\n        pcbX={cell.center.x}\n        pcbY={cell.center.y}\n      />\n    ))}\n  </board>\n)\n```\n\nThe array of `GridCellPositions` contains:\n- `index`: Sequential cell number\n- `row`, `col`: Grid position\n- `center`, `topLeft`, `bottomRight`: Coordinate points\n\n================\nFile: docs/advanced/units.md\n================\n---\ntitle: tscircuit Units\n---\n\nIn tscircuit you can specify a unit explicitly with a string e.g. \"0.1mm\", but\nyou can also also specify numbers without units and the unit will be inferred\nfrom [platform](../guides/platform-configuration.md), [board configuration](../elements/board.mdx), [subcircuit configuration](../elements/subcircuit.mdx)\nor the defaults below\n\n## Default Units\n\nBy default, tscircuit uses the following base units:\n\n| Measurement Type | Base Unit | Description  |\n| ---------------- | --------- | ------------ |\n| Length           | mm        | Millimeters  |\n| Time             | ms        | Milliseconds |\n| Mass             | g         | Grams        |\n| Angle            | deg       | Degrees      |\n| Frequency        | Hz        | Hertz        |\n| Volume           | ml        | Milliliters  |\n| Voltage          | V         | Volts        |\n| Current          | A         | Amperes      |\n| Resistance       | Î©         | Ohms         |\n| Capacitance      | F         | Farads       |\n| Inductance       | H         | Henries      |\n\nBase units are chosen based on the industry convention.\n\n================\nFile: docs/building-electronics/designing-electronics-from-scratch.md\n================\n---\ntitle: Designing Electronics from Scratch\nsidebar_position: 2\n---\n\n## Overview\n\nTypically electronics engineers go through the following steps when designing\na new electronic device.\n\n1. Requirements Analysis\n2. System Diagramming\n3. Schematic Capture\n4. PCB Layout\n5. Ordering\n\n## Requirements Analysis\n\nThis stage is all about making sure you have a clear idea of what the device\nshould do. Your development and cost preferences are a huge factor here.\n\n1. What should the device do?\n2. How much power is needed?\n3. How much processing power do I need?\n4. Do I want to run linux, MicroPython, or low-level C code? Do I even need\n   to run code?\n5. How much does cost matter?\n6. Should I use only parts available from turn-key manufacturers like JLCPCB?\n\n## System Diagramming\n\nIn this phase we create a diagram overview of the system and how things connect\ntogether abstractly\n\n1. What components should I use?\n2. How do things connect together at a high level?\n\nThe system diagram can instantly communicate how your design works to others.\n\n### System Diagram Example 1: Bluetooth Humidity and CO2 Sensor\n\nHere's an example of a system diagram for a simple IoT device that takes\nhumidity and CO2 measurements and can communicate them via bluetooth.\n\n<figure>\n<img src=\"/img/system-diagram-1.png\" alt=\"System Diagram Example 1\" />\n<figcaption>System Diagram Example 1</figcaption>\n</figure>\n\n## Schematic Capture\n\nIn this phase we create a schematic diagram of the system and how things connect\ntogether.\n\n1. Using reference designs, datasheets or pre-made modules, create all the\n   elements of the circuit in tscircuit\n2. Run design checks to make sure the circuit is hooked up correctly\n\nIn this phase you should create chip modules or [import third party chips](../guides/importing-modules-and-chips/importing-from-jlcpcb.mdx)\nas you build up your circuit. You shouldn't be configuring chips in\nthe same file that connects all your chips together- give each chip it's own\nmodule.\n\nAfter the schematics look good, you can export to a readable netlist and upload\nthe netlist to AI tools like OpenAI O1 to get a review and make sure everything\nis connected properly! This is also a good stage to get your schematic reviewed\nby your team members.\n\n## PCB Layout\n\nIn this phase we create a layout of the circuit on a PCB.\n\ntscircuit automatically autoroutes the circuit for you, but you may still need\nto \"drag'n'drop\" components in the PCB viewer to the locations you want them to\nbe in. Use [manual editing](../guides/manual-edits.mdx) to drag'n'drop\ncomponents on the PCB.\n\n## Ordering\n\nIn this phase we order the PCB from a manufacturer. Typically this is done\nby downloading [Fabrication Files](../guides/understanding-fabrication-files.md)\nand \"dragging and dropping\" them into a manufacturer's website.\n\nSometimes you'll want to assemble the PCB yourself (or sometimes just a single\ncomponent that your manufacturer doesn't have!). In this case, you'll need a\nlab setup to facilitate soldering.\n\nCheck out our guide on [Ordering Prototypes](./ordering-prototypes.mdx) to learn more.\n\n================\nFile: docs/building-electronics/ordering-prototypes.mdx\n================\n---\ntitle: Ordering Prototypes\nsidebar_position: 4\n---\n\n## Overview\n\nAfter [you've designed your device](./designing-electronics-from-scratch.md),\nyou can use [fabrication files](../guides/understanding-fabrication-files.md)\nto get your device fully assembled.\n\nThe two most popular services for\nordering prototypes are [JLCPCB](https://jlcpcb.com) and [PCBWay](https://pcbway.com).\n\n## Uploading [Fabrication Files](../guides/understanding-fabrication-files.md)\n\nMost fabrication or turn-key assembly services allow you to directly upload 3 types of files:\n\n- Gerbers\n- Bill of Materials (BOM CSV)\n- Pick'n'Place File (CSV)\n\nThese files are all available inside your [Fabrication Files zip file](../guides/understanding-fabrication-files.md) when\nyou export from tscircuit.\n\n<figure>\n<img src=\"/img/jlcpcb-upload.png\" />\n<figcaption>Many fabricators allow you to directly drop fabrication files on their website!</figcaption>\n</figure>\n\n## Assembling your own boards\n\nIt can sometimes be easier to assemble your own boards, this gives you more\ncontrol over your inventory and can lower the cost of your prototypes since\nassembly services often have a minimum order quantity.\n\nEven if you're assembling your own board, you should still order your PCB\nfrom a fabrication service. PCBs require a chemical etching process to do\nat home and it's rarely worth the hassle to do it yourself.\n\nWhen you're assembling your own board, you can create a printout of your\nAssembly View to make it easier to place components. In an assembly view,\nthe \"pin1\" location is marked with a cut corner. This can help you verify\nthe orientation of each component as you place it.\n\n<figure>\n<img src=\"/img/assembly-view-in-editor.png\" />\n</figure>\n\n================\nFile: docs/building-electronics/what-are-electronics-made-of.mdx\n================\n---\ntitle: What are electronics made of?\nsidebar_position: 1\n---\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n## Overview\n\nIn this tutorial, we're going to be talking about the different elements that\nmake up a Printed Circuit Board (PCB). For each element, we'll show different\nways that the element can be represented in tscircuit.\n\n## What is copper? Why are PCBs green?\n\nCopper is a conductive material that's used on a PCB to make an electrical\nconnection between chips. A PCB is mostly made up of fiberglass with a small\nlayer of precisely etched copper. The fiberglass is non-conductive and often\ncoated with non-conductive green \"soldermask\" to cover parts of the copper that\naren't meant to be connected to chips.\n\n<figure style={{ textAlign: \"center\" }}>\n<img style={{ width: 400, height: 240, objectFit: \"cover\" }} src=\"/img/ai-pcb-1.webp\" alt=\"AI Generated PCB Image\" />\n<figcaption>An AI-generated PCB image. All the yellow parts represent copper, while the green parts represent fiberglass with a green soldermask</figcaption>\n</figure>\n\nA PCB can be thought of as a bunch of \"printed\" copper separated by fiberglass\nsections that \"insulate\" or don't conduct electricity. We \"glue\" (solder) chips\nto the copper \"pads\" to add them to the circuit.\n\n## What are PCB layers?\n\nWhen you print on a piece of paper, you can print \"single-sided\" or \"double-sided\",\nPCBs can also be printed singled-sided or double-sided! The \"front\" of the PCB\nis called the \"top\" layer, and the \"back\" of the PCB is called the \"bottom\" layer.\n\nWe can \"print\" copper to each of these layers to draw lots of wires and connect\nlots of chips. Sometimes a wire needs to \"go over\"/\"go under\" another wire\nbecause the wires aren't allowed to cross. When this happens, we can use the\n\"back\" or \"bottom layer\" of the PCB to draw the wire so that the wires don't\naccidentally touch.\n\n## Vias\n\nVias are holes that connect different layers of PCB. Let's say you have a chip\non the top layer of a PCB and the back layer of a PCB. How can you connect them?\nThe copper on the top needs some way to \"pass through\" to the bottom layer.\n\nThis is where vias come in. A via is a hole that is \"filled with copper\" so that\nthe top layer can pass to the bottom.\n\n<figure>\n<img src=\"/img/via.png\" alt=\"Vias\" /> \n<figcaption>Vias connect different layers of a PCB</figcaption> \n</figure>\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\n\nexport default () => (\n  <footprint>\n    <via\n      toLayer=\"bottom\"\n      fromLayer=\"top\"\n      holeDiameter=\"0.25mm\"\n      outerDiameter=\"0.6mm\"\n    />\n  </footprint>\n)\n\n`} />\n\n\n## Plated Holes\n\nA plated hole is similar to a via but it's hollow so that you can push metal pins\nthrough it. This is important for chips that have big pins that need to fit into\nholes. Chips with big pins that must go through holes are called \"through-hole\"\nchips, and chips with small\npins are called \"surface-mount\" chips.\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n  <footprint>\n    <platedhole\n      shape=\"circle\"\n      x=\"5mm\"\n      y=\"2.4mm\"\n      holeDiameter=\"0.25mm\"\n      outerDiameter=\"0.35mm\"\n    />\n  </footprint>\n)\n\n`} />\n\n## Unplated Holes \"Regular Holes\"\n\nUnplated holes or \"regular holes\" are just holes in the printed circuit board\nwithout any copper around them. They don't electrically connect anything, but\ncan be very helpful for mounting the printed circuit board.\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n  <footprint>\n    <hole diameter=\"1mm\" />\n  </footprint>\n)\n\n`} />\n\n## Traces\n\nTraces are the wires that connect the components on a PCB. They are made of\ncopper and mostly covered by green soldermask so that they don't accidentally\nconduct to each other if something conductive like a wire or piece of metal falls\nacross them.\n\nWe represent traces in PCB viewers with different colors depending on what\nlayer they fall on. In tscircuit, traces are always autorouted, so you don't\nneed to tell it which path to take- it'll automatically find one that makes sure\nit doesn't cross any other traces.\n\nTraces allow chips to \"talk\" to each other and for power to be shared across all\nchips.\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <resistor\n      resistance=\"1k\"\n      footprint=\"0402\"\n      name=\"R1\"\n      schX={3}\n      pcbX={3}\n    />\n    <capacitor\n      capacitance=\"1000pF\"\n      footprint=\"0402\"\n      name=\"C1\"\n      schX={-3}\n      pcbX={-3}\n    />\n    <trace from=\".R1 > .pin1\" to=\".C1 > .pin1\" />\n  </board>\n)\n\n`} />\n\n## What are inner layers?\n\nInner layers are layers of PCB that aren't visible, they're sandwiched on the\ninside. Sometimes this is useful when you have a lot of wires to connect and\nit's almost impossible to stop them from crossing each other.\n\n<figure>\n<img src=\"/img/pcb-layers.png\" alt=\"Inner layers\" /> \n<figcaption>Inner layers are layers of PCB that aren't visible, they're sandwiched on the inside. Excellent image from <a href=\"https://www.pcbway.com/blog/Engineering_Technical/3_STEPS_How_to_determine_calculate_number_of_PCB_layers.html\">pcbway</a></figcaption> \n</figure>\n\n================\nFile: docs/command-line/tsci-add.mdx\n================\n---\ntitle: tsci add\n---\n\n`tsci add` is the same as `npm add` or `bun add`, but defaults to the tscircuit\nregistry. If your project has the [tsci `.npmrc`](../web-apis/the-registry-api.md#using-the-tscircuit-npm-registry), you can just do `bun add @tsci/<author>.<package>`\nand it has the same effect.\n\n```\n> tsci add seveibar/PICO_W\n# Added @tsci/seveibar.PICO_W@0.0.1\n```\n\nYou can then import the module and use it for your board!\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n\n\nimport { PICO_W } from \"@tsci/seveibar.PICO_W\"\n\nexport default () => (\n    <PICO_W name=\"U1\" />\n)\n\n`}\n/>\n\n================\nFile: docs/command-line/tsci-dev.md\n================\n---\ntitle: tsci dev\nsidebar_position: 2\n---\n\n`tsci dev` runs a web server that lets you see a preview of your electronics\nin your web browser.\n\nAfter you run `tsci dev` you should see a preview of your entrypoint file in\nyour web browser on https://localhost:3020\n\n![tsci dev result](../../static/img/tsci-dev.png)\n\n![browser](../../static/img/pcb-runframe.png)\n\n================\nFile: docs/command-line/tsci-export.md\n================\n---\ntitle: tsci export\n---\n\n## Overview\n\n`tsci export` can be used to convert a `tsx` file or `circuit.json` file into\nschematic PDFs, fabrication files, gerbers, pick'n'place files, netlists and\nmany more formats.\n\n================\nFile: docs/command-line/tsci-init.md\n================\n---\ntitle: tsci init\n---\n\n================\nFile: docs/command-line/tsci-login.md\n================\n---\ntitle: tsci login\nsidebar_position: 1\n---\n\n`tsci login` allows you to login to the tscircuit registry. You don't need to\nlogin to tscircuit to use any tools, but logging in does enable the following\ngreat features:\n\n- Cloud Autorouting (`autorouter=\"auto-cloud\"`)\n- Package Management (publishing and automatic bundling)\n\n:::info\nYou don't need a tscircuit account to download and use other people's packages\n:::\n\n`tsci login` will take you to a login page where you'll sign in with Github.\nAfter the login flow you'll have have token on your machine that authenticates\nyou to publish packages or use the cloud autorouter.\n\n## Logout\n\nTo logout again, just run `tsci logout`\n\n## Other Auth Functions\n\nRun `tsci auth --help` to see other auth functions, such as printing your token\nfor use with the [Registry API](../web-apis/the-registry-api.md)\n\n================\nFile: docs/contributing/bounties-and-sponsorship.md\n================\n---\ntitle: Bounties and Sponsorship\n---\n\ntscircuit has thousands dollars (USD) of bounties opened every month in over\n50 new weekly issues. We also automatically sponsor regular contributors\nhundreds of dollars each based on their contributions, which we track with Github's API\nin our weekly [contribution-tracker](https://github.com/tscircuit/contribution-tracker)\n(resets every Wednesday)\n\nMany people follow the [bounties channel on discord](https://discord.com/channels/1233487248129921135/1301957862762872832) or our [bounty board](https://console.algora.io/org/tscircuit/bounties?status=open)\nto find issues to contribute to, but **this is actually the hardest way to get bounties!**\n\n**The easiest way to get bounties and sponsorship is to _actually use tscircuit and try to build a circuit_.** When you\nfind something confusing or buggy, create an issue. When you create an issue that\ngets bountied, you get extra points on the contribution tracker and you become\nthe best person to fix the issue because you understand it so well! If you\ncontinually do this, you'll find that their are infinite issues to be done!\n\nTo be eligible for Github Sponsorship, you must be in a supported country and\nhave Github Sponsors enabled on your Github profile.\n\n================\nFile: docs/contributing/getting-started-as-a-contributor.md\n================\n---\ntitle: Getting Started as a Contributor\nsidebar_position: 1\n---\n\ntscircuit is a great project to contribute to if you're familiar with Typescript\nand React.\n\ntscircuit is composed of over 200 repositories, but every project uses [bun](https://bun.sh),\nso make sure to install bun before you start contributing.\n\nTo contribute to tscircuit, you need to make [Pull Requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests) from a fork of a repository.\n\n## Before You Start\n\n1. Make sure bun is installed on your system\n2. Make sure you've signed up at [tscircuit.com](https://tscircuit.com) and have followed a tutorial in the docs to create a circuit board\n\n## Recommended Contribution Order\n\nWe recommend the following order for contributing to tscircuit. Contributing to repositories in this order will make sure you have a good understanding of the tscircuit ecosystem.\n\nIf you're not able to find an issue in the repo, ask on discord! Maintainers often forget to create issues even though there are many problems they need solved!\n\n## 1. [tscircuit/schematic-symbols](https://github.com/tscircuit/schematic-symbols)\n\nDifficulty: â­ (easy) Â· [Issues](https://github.com/tscircuit/schematic-symbols/issues) Â· [Repo](https://github.com/tscircuit/schematic-symbols)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/schematic-symbols)](https://github.com/tscircuit/schematic-symbols/issues)\n\nThis is a large repository of schematic symbols, you can view the [symbols here](https://symbols.tscircuit.com)\n\n![Schematic Symbols Project](../../static/img/symbols.png)\n\nWe also have a [video tutorial](https://blog.tscircuit.com/i/149495167/help-us-build-the-largest-library-of-schematic-symbols) for contributing to this project!\n\n## 2. [tscircuit/footprinter](https://github.com/tscircuit/footprinter)\n\nDifficulty: â­â­ (medium) Â· [Issues](https://github.com/tscircuit/footprinter/issues) Â· [Repo](https://github.com/tscircuit/footprinter)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/footprinter)](https://github.com/tscircuit/footprinter/issues)\n\nThis is a project that generates the \"footprint\" where a chip is placed on a circuit board from a string.\n\nFor example, you might turn the string \"quad24\" into the image below:\n\n![Footprinter Project](../../static/img/footprinter.webp)\n\nHere's the [video tutorial for contributing to footprinter](https://blog.tscircuit.com/p/learn-how-to-contribute-to-tscircuits)\n\n## 3. [tscircuit/cli](https://github.com/tscircuit/cli)\n\nDifficulty: â­â­ (medium) Â· [Issues](https://github.com/tscircuit/cli/issues) Â· [Repo](https://github.com/tscircuit/cli)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/cli)](https://github.com/tscircuit/cli/issues)\n\nThis is the main development tool for tscircuit. It provides a local development server and package management. The CLI is what you use when you run `tsci dev` or `tsci init`.\n\n## 4. [tscircuit.com](https://github.com/tscircuit/tscircuit.com)\n\nDifficulty: â­â­ (medium) Â· [Issues](https://github.com/tscircuit/tscircuit.com/issues) Â· [Repo](https://github.com/tscircuit/tscircuit.com)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/tscircuit.com)](https://github.com/tscircuit/tscircuit.com/issues)\n\nThis is the main website for tscircuit, it features an editor for circuit boards! You should try it at [tscircuit.com](https://tscircuit.com)!\n\nThere are a lot of issues in this repo,\n\n## 5. [circuit-to-svg](https://github.com/tscircuit/circuit-to-svg)\n\nDifficulty: â­â­ (medium) Â· [Issues](https://github.com/tscircuit/circuit-to-svg/issues) Â· [Repo](https://github.com/tscircuit/circuit-to-svg)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/circuit-to-svg)](https://github.com/tscircuit/circuit-to-svg/issues)\n\nThis is a library that converts [Circuit JSON](https://github.com/tscircuit/circuit-json) into SVG files. We use\nthis all over the place, including in almost all of our\ntests!\n\n## 6. [tscircuit/core](https://github.com/tscircuit/core)\n\nDifficulty: â­â­â­ (hard) Â· [Issues](https://github.com/tscircuit/core/issues) Â· [Repo](https://github.com/tscircuit/core)\n\n[![GitHub issues](https://img.shields.io/github/issues/tscircuit/core)](https://github.com/tscircuit/core/issues)\n\nThis is the core library that powers tscircuit. It contains all the logic for converting React components into circuit boards, schematics and PCBs.\n\nThe core library is written in Typescript and uses React. It's a great project to contribute to if you want to learn about how tscircuit works under the hood.\n\nHere's a [video tutorial for contributing to core](https://blog.tscircuit.com/p/learn-how-to-contribute-to-tscircuits-core).\n\n================\nFile: docs/contributing/overview-of-projects.md\n================\n---\ntitle: Overview of Projects\nsidebar_position: 2\n---\n\n| Repo                                                                          | Description                                                                                    | Open Issues                                                                                                                                 |\n| ----------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- |\n| [tscircuit/core](https://github.com/tscircuit/core)                           | Core library that powers tscircuit, handles conversion of React components into circuit boards | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/core)](https://github.com/tscircuit/core/issues)                           |\n| [tscircuit/schematic-symbols](https://github.com/tscircuit/schematic-symbols) | Library of schematic symbols used across tscircuit                                             | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/schematic-symbols)](https://github.com/tscircuit/schematic-symbols/issues) |\n| [tscircuit/footprinter](https://github.com/tscircuit/footprinter)             | Generates PCB footprints from string descriptions                                              | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/footprinter)](https://github.com/tscircuit/footprinter/issues)             |\n| [tscircuit/circuit-to-svg](https://github.com/tscircuit/circuit-to-svg)       | Converts Circuit JSON into SVG files                                                           | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/circuit-to-svg)](https://github.com/tscircuit/circuit-to-svg/issues)       |\n| [tscircuit/tscircuit.com](https://github.com/tscircuit/tscircuit.com)         | Main website and circuit board editor                                                          | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/tscircuit.com)](https://github.com/tscircuit/tscircuit.com/issues)         |\n| [tscircuit/cli](https://github.com/tscircuit/cli)                             | Main development tool for tscircuit, provides local development server and package management  | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/cli)](https://github.com/tscircuit/cli/issues)                             |\n| [tscircuit/runframe](https://github.com/tscircuit/runframe)                   | React component to preview and run tscircuit circuits                                          | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/runframe)](https://github.com/tscircuit/runframe/issues)                   |\n| [tscircuit/pcb-viewer](https://github.com/tscircuit/pcb-viewer)               | React component for viewing PCBs                                                               | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/pcb-viewer)](https://github.com/tscircuit/pcb-viewer/issues)               |\n| [tscircuit/3d-viewer](https://github.com/tscircuit/3d-viewer)                 | React component for viewing 3D previews                                                        | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/3d-viewer)](https://github.com/tscircuit/3d-viewer/issues)                 |\n| [tscircuit/easyeda-converter](https://github.com/tscircuit/easyeda-converter) | Command line utility for converting JLCPCB footprints to tscircuit                             | [![GitHub issues](https://img.shields.io/github/issues/tscircuit/easyeda-converter)](https://github.com/tscircuit/easyeda-converter/issues) |\n\n================\nFile: docs/contributing/the-contributor-handbook.md\n================\n---\ntitle: The Contributor Handbook\n---\n\nWe have some important patterns that make contributing to\ntscircuit more consistent, we document these in [our handbook repo](https://github.com/tscircuit/handbook).\n\nHere are a couple of really important ones:\n\n1. [Use Yalc](https://github.com/tscircuit/handbook/blob/main/guides/using-yalc.md) - tscircuit uses many repositories so it can be hard to test different repositories interacting.\n2. [Code Styles](https://github.com/tscircuit/handbook/blob/main/guides/code.md) - tscircuit has some consistent code patterns we use in every project. This makes the code more universally understood. Definitely note the banned words section!\n\nRead the [full handbook here](https://github.com/tscircuit/handbook).\n\n================\nFile: docs/elements/board.mdx\n================\n---\ntitle: <board />\nsidebar_position: 1\n---\n\nThe `<board />` element is a root element that contains all the chips and traces\nto create a PCB.\n\nYou can think of a `<board />` like a `<body />` element in HTML. Everything\ngoes in a board!\n\n\nimport CircuitPreview from '@site/src/components/CircuitPreview'\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resistor resistance=\"1k\" footprint=\"0402\" name=\"R1\" />\n    </board>\n  )\n\n`} />\n\n\n## Board Properties\n\n### Customizing the Size of the Board\n\nGenerally you'll use the `width` and `height` properties to define the size of\nthe board.\n\n### Setting the `autorouter`\n\nBoards or [subcircuits](./subcircuit.mdx) can specify what autorouter should be\nused to route any traces within them.\n\nUsually you'll want to use an autorouter preset:\n\n- `autorouter=\"auto\"` - Uses the [platform configuration](../guides/platform-configuration.md). For tscircuit.com this defaults to `sequential-trace`.\n- `autorouter=\"sequential-trace\"` - Iterate over each trace and use tscircuit's fast built-in autorouter. This method is fast and deterministic but often fails with over 50 traces.\n- `autorouter=\"auto-local\"` - Use the platform configuration, but only route locally (do not make API calls)\n- `autorouter=\"auto-cloud\"` - Use the platform configuration for \n\nFor complex boards with over 50 traces, you should use `autorouter=\"auto-cloud\"`\nto take advantage of tscircuit's cloud autorouters, which internally use the popular\n[freerouting](https://github.com/freerouting/freerouting) library.\n\nYou can also specify a custom autorouter object to use your own autorouter.\n\n<CircuitPreview defaultView=\"pcb\" code={`\n  export default () => (\n    <board\n      width=\"20mm\"\n      height=\"20mm\"\n      autorouter={{\n        serverUrl: \"https://registry-api.tscircuit.com\",\n        serverMode: \"job\",\n        inputFormat: \"simplified\",\n      }}\n    >\n      <chip name=\"U1\" footprint=\"soic8\" pcbX={5} pcbY={0} />\n      <resistor\n        name=\"R1\"\n        pcbX={-5}\n        pcbY={0}\n        resistance={100}\n        footprint=\"0402\"\n      />\n      <trace from=\".U1 > .pin1\" to=\".R1 > .pin1\" />\n    </board>\n  )\n`} />\n\nLearn more about [the Autorouting API here](../web-apis/autorouting-api.mdx)\n\n\n### Custom Board Outlines\n\nYou can specify a custom outline for your board by passing an `outline` prop.\nThe PCB you get will have this outline cut out, this is great when you want a\nboard that's not a rectangle!\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n  <board\n    outline={[\n      { x: -22.5, y: 24.5 },\n      { x: 22.5, y: 24.5 },\n      { x: 22.5, y: 16.5 },\n      { x: 20.5, y: 16.5 },\n      { x: 20.5, y: 12.5 },\n      { x: 22.5, y: 12.5 },\n      { x: 22.5, y: 2.5 },\n      { x: 18, y: -1.5 },\n      { x: 18, y: -18 },\n      { x: -18, y: -18 },\n      { x: -18, y: -1.5 },\n      { x: -22.5, y: 2.5 },\n      { x: -22.5, y: 12.5 },\n      { x: -20.5, y: 12.5 },\n      { x: -20.5, y: 16.5 },\n      { x: -22.5, y: 16.5 },\n      { x: -22.5, y: 24.5 },\n    ]}\n\n    // These are currently required due to this issue:\n    // https://github.com/tscircuit/core/issues/564\n    width=\"50mm\"\n    height=\"50mm\"\n  />\n)\n\n`} />\n\n## Flexible PCBs\n\n:::info\nInterested in flexible PCBs? Upvote [this issue on Github](https://github.com/tscircuit/tscircuit/issues/510)!\n:::\n\n================\nFile: docs/elements/capacitor.mdx\n================\n---\ntitle: <capacitor />\nsidebar_position: 3\n---\n\n## Overview\n\nA `<capacitor />` stores electrical energy in an electric field. Capacitors are commonly used for filtering, energy storage, and timing circuits. Unlike resistors, capacitors can be polarized (like electrolytic capacitors) or non-polarized (like ceramic capacitors).\n\nA capacitor element has two pins. Polarized capacitors must be placed with correct orientation to avoid damage.\n\nWhen specifying a capacitor, you'll need to provide a footprint string (like `0402` or `0805`) and capacitance value. Popular capacitor types and sizes can be found at [jlcsearch](https://jlcsearch.tscircuit.com/capacitors/list).\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n\n  export default () => (\n    <capacitor\n      name=\"C2\"\n      footprint=\"axial_p5mm\"\n      capacitance=\"10Î¼F\"\n      polarized\n    />\n  )\n\n  `}\n/>\n\n## Pins\n\nA capacitor has the following pins and aliases:\n\n| Pin # | Aliases (Polarized) | Description |\n| ---------- | ------- | ----------- |\n| pin1 | pos, anode, left | The positive terminal (required for polarized capacitors) |\n| pin2 | neg, cathode, right | The negative terminal (must be connected properly for polarized caps) |\n\n:::warning\nFor polarized capacitors, you must connect the positive and negative pins correctly. Reversing polarity can cause capacitor failure or even explosion!\n:::\n\n## Specifications\n\nCapacitors can be configured with these key properties:\n\n- **capacitance** - The capacitance value specified as a string e.g. `\"100nF\"` or `\"2.2Î¼F\"`\n- **voltageRating** - Maximum voltage the capacitor can handle e.g. `\"25V\"`\n- **tolerance** - Capacitance tolerance percentage e.g. `\"Â±10%\"`\n- **temperatureCoefficient** - Temperature stability specification e.g. `\"X7R\"`\n- **equivalentSeriesResistance** - ESR value for critical applications e.g. `\"0.5Î©\"`\n\n## Automatic Part Selection\n\nLike resistors, tscircuit will automatically select suitable capacitor parts based on your specifications through the [platform parts engine](../guides/platform-configuration.md). For specialized capacitors (e.g., low ESR, high voltage), you may want to specify `supplierPartNumbers` explicitly.\n\n================\nFile: docs/elements/chip.mdx\n================\n---\ntitle: <chip />\nsidebar_position: 1\n---\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\nThe `<chip />` is the most common and most powerful built-in tscircuit element.\nYou can represent virtually any \"single-part\" electronic component with `<chip />`,\nit is extremely flexible.\n\n## Simple Chips\n\nHere's an example of typical `<chip />` usage. We specify a footprint string and\nthe pin labels that should be used for the schematic representation.\n\n<CircuitPreview alwaysShowCode defaultView=\"schematic\" code={`\nimport type { CommonLayoutProps } from \"tscircuit\"\n\ninterface Props extends CommonLayoutProps {\n  name: string\n}\n\nexport const A555Timer = (props: Props) => {\n  return (\n    <chip\n      footprint=\"soic8\"\n      pinLabels={{\n        pin1: \"VCC\",\n        pin2: \"DISCH\",\n        pin3: \"THRES\",\n        pin4: \"CTRL\",\n        pin5: \"GND\",\n        pin6: \"TRIG\",\n        pin7: \"OUT\",\n        pin8: \"RESET\"\n      }}\n      {...props}\n    />\n  )\n}\n`} />\n\n## Customizing the Schematic Representation\n\nYou can alter how a chip appears on the schematic by using the `schPinArrangement`\n, `schPinStyles` and `schWidth` properties.\n\n### `schPinArrangement`\n\n`schPinArrangement` controls the arrangement of the pins on the schematic box\nrepresenting the chip. You can use this to group similar pins together e.g. to\ngroup GPIO pins together.\n\n:::note\n`schPortArrangement` was renamed to `schPinArrangement` in 2025.\n:::\n\n<CircuitPreview splitView defaultView=\"schematic\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint=\"soic8\"\n      schPortArrangement={{\n        leftSide: {\n          direction: \"top-to-bottom\",\n          pins: [\"VCC\", \"DISCH\", \"THRES\", \"CTRL\"],\n        },\n        rightSide: {\n          direction: \"bottom-to-top\",\n          pins: [\"GND\", \"TRIG\", \"OUT\", \"RESET\"],\n        },\n      }}\n      pinLabels={{\n        pin1: \"VCC\",\n        pin2: \"DISCH\",\n        pin3: \"THRES\",\n        pin4: \"CTRL\",\n        pin5: \"GND\",\n        pin6: \"TRIG\",\n        pin7: \"OUT\",\n        pin8: \"RESET\"\n      }}\n    />\n  </board>\n)\n`}\n/>\n\nYou can also place pins on the top or bottom of the schematic box.\n\n<CircuitPreview splitView defaultView=\"schematic\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint=\"soic8\"\n      schPortArrangement={{\n        topSide: {\n          direction: \"left-to-right\",\n          pins: [\"VCC\"],\n        },\n        bottomSide: {\n          direction: \"left-to-right\",\n          pins: [\"GND\"],\n        },\n        leftSide: {\n          direction: \"top-to-bottom\",\n          pins: [\"DISCH\", \"THRES\", \"CTRL\"],\n        },\n        rightSide: {\n          direction: \"bottom-to-top\",\n          pins: [\"TRIG\", \"OUT\", \"RESET\"],\n        },\n      }}\n      pinLabels={{\n        pin1: \"VCC\",\n        pin2: \"DISCH\",\n        pin3: \"THRES\",\n        pin4: \"CTRL\",\n        pin5: \"GND\",\n        pin6: \"TRIG\",\n        pin7: \"OUT\",\n        pin8: \"RESET\"\n      }}\n    />\n  </board>\n)\n`} />\n\n### `schPinStyles`\n\n`schPinStyles` controls the style of the pins on the schematic box \n\n<CircuitPreview splitView defaultView=\"schematic\" code={`\n\nexport default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <chip\n        name=\"U1\"\n        footprint=\"soic8\"\n        schPinArrangement={{\n          topSide: {\n            direction: \"left-to-right\",\n            pins: [\"VCC\"],\n          },\n          bottomSide: {\n            direction: \"left-to-right\",\n            pins: [\"GND\"],\n          },\n          leftSide: {\n            direction: \"top-to-bottom\",\n            pins: [\"DISCH\", \"THRES\", \"CTRL\"],\n          },\n          rightSide: {\n            direction: \"bottom-to-top\",\n            pins: [\"TRIG\", \"OUT\", \"RESET\"],\n          },\n        }}\n        schPinStyle={{\n          pin1: {\n            bottomMargin: 0.2\n          },\n          GND: {\n            rightMargin: \"0.5mm\"\n          },\n          THRES: {\n            topMargin: 0.5\n          },\n          OUT: {\n            topMargin: 1,\n            bottomMargin: \"1mm\"\n          }\n        }}\n        // This is the future syntax for schPinStyle!\n        //   schPinStyle={{\n          //   pin1: {\n            //   marginBottom: 0.2,\n          //   },\n          //   GND: { marginRight: \"0.5mm\" },\n          //   THRES: { marginTop: 0.5 },\n          //   OUT: {\n            //   marginTop: 1,\n            //   marginBottom: \"1mm\",\n          //   },\n        //   }}\n        pinLabels={{\n          pin1: \"VCC\",\n          pin2: \"DISCH\",\n          pin3: \"THRES\",\n          pin4: \"CTRL\",\n          pin5: \"GND\",\n          pin6: \"TRIG\",\n          pin7: \"OUT\",\n          pin8: \"RESET\",\n        }}\n      />\n    </board>\n)\n`} />\n\n\n### Custom Footprints\n\nOften you will have a chip that you want to carefully specify the position of\neach pad, plated hole, silkscreen line or other PCB element. To do this, just\ninsert a `<footprint />` component instead of string for the `footprint` prop.\n\nHere's an example of a chip with a custom footprint:\n\n<CircuitPreview splitView defaultView=\"pcb\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint={\n        <footprint>\n          <platedhole\n            portHints={[\"4\"]}\n            pcbX=\"3.2499299999998357mm\"\n            pcbY=\"-2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"2\"]}\n            pcbX=\"3.2499299999998357mm\"\n            pcbY=\"2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"1\"]}\n            pcbX=\"-3.2499299999999494mm\"\n            pcbY=\"2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"3\"]}\n            pcbX=\"-3.2499299999999494mm\"\n            pcbY=\"-2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <silkscreenpath\n            route={[\n              { x: -2.2743160000001126, y: -2.999994000000015 },\n              { x: 2.274315999999999, y: -2.999994000000015 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -2.999994000000129, y: 1.0999978000000965 },\n              { x: -2.999994000000129, y: -0.999998000000005 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: 3.0999937999998792, y: 1.0279888000000028 },\n              { x: 3.0999937999998792, y: -1.0999977999999828 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -1.99999600000001, y: 2.999994000000015 },\n              { x: 2.274315999999999, y: 2.999994000000015 },\n            ]}\n          />\n        </footprint>\n      }\n      schPortArrangement={{\n        leftSide: {\n          direction: \"top-to-bottom\",\n          pins: [1, 3],\n        },\n        rightSide: {\n          direction: \"bottom-to-top\",\n          pins: [4, 2],\n        },\n      }}\n    />\n  </board>\n)\n`} />\n\nFor more information about custom footprints, check out the [<footprint /> element](./footprint.mdx)\n\n### Internally Connected Pins\n\nSome chips, such as a standard 4 pin pushbutton, have pins that are internally\nconnected. This can be useful to represent for simulation or to enable omitting\npins from a schematic.\n\n\n<CircuitPreview defaultView=\"code\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint=\"pushbutton\"\n      internallyConnectedPins={[\n        [\"pin1\", \"pin4\"],\n        [\"pin2\", \"pin3\"]\n      ]}\n    />\n  </board>\n)\n\n`} />\n\n\n:::note\nYou may not want to do this for power or ground pins on boards where you're\nexpected to connect the pins specifically externally. For example, if you have\nseveral V5 pins that each need a decoupling capacitor, it would be better to\nmanage the connections explicitly with traces (perhaps using `maxTraceLength`!)\neven if they are internally connected.\n:::\n\n### Externally Connected Pins\n\nTo indicate that pins should be externally connected, you can use the `externallyConnectedPins` props.\nJust like the `internallyConnectedPins` prop, this is an array of arrays of pin labels, where each\nsub-array represents a group of pins that should be connected together.\n\n<CircuitPreview defaultView=\"code\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint=\"soic8\"\n      pinLabels={{\n        pin1: \"VCC\",\n        pin2: \"DISCH\",\n        pin3: \"THRES\",\n        pin4: \"CTRL\",\n        pin5: \"GND\",\n        pin6: \"TRIG\",\n        pin7: \"OUT\",\n        pin8: \"RESET\"\n      }}\n      externallyConnectedPins={[\n        [\"GND\", \"DISCH\"],\n        [\"TRIG\", \"VCC\"]\n      ]}\n    />\n  </board>\n)\n\n`} />\n\n## Specifying the Manufacturer Part Number or Supplier Part Numbers\n\ntscircuit will attempt to find matching parts based on the `manufacturerPartNumber`\nand `footprint` that was provided. If you know the exact part from your supplier\nyou'd like to use, you should set the `supplierPartNumbers` property as shown\nbelow:\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n\nimport { createUseComponent } from \"@tscircuit/core\"\nimport type { CommonLayoutProps } from \"@tscircuit/props\"\n\n\ninterface Props extends CommonLayoutProps {\n  name: string\n}\n\nexport const Diode1N4148WS = (props: Props) => {\n  return (\n    <diode\n      {...props}\n      supplierPartNumbers={{\n        jlcpcb: [\"C57759\"]\n      }}\n      footprint={\n        <footprint>\n          <smtpad\n            portHints={[\"1\"]}\n            pcbX=\"-1.1725910000000113mm\"\n            pcbY=\"0mm\"\n            width=\"0.9999979999999999mm\"\n            height=\"0.7500112mm\"\n            shape=\"rect\"\n          />\n          <smtpad\n            portHints={[\"2\"]}\n            pcbX=\"1.1725910000000113mm\"\n            pcbY=\"0mm\"\n            width=\"0.9999979999999999mm\"\n            height=\"0.7500112mm\"\n            shape=\"rect\"\n          />\n          <silkscreenpath\n            route={[\n              { x: 0.9012427999999773, y: -0.726211400000011 },\n              { x: 0.9012427999999773, y: -0.5199887999999646 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: 0.9012427999999773, y: 0.726211400000011 },\n              { x: 0.9012427999999773, y: 0.5299964000000728 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -0.8512047999998913, y: 0.726211400000011 },\n              { x: 0.9012427999999773, y: 0.726211400000011 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -0.8512047999998913, y: -0.726211400000011 },\n              { x: 0.9012427999999773, y: -0.726211400000011 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -0.44676059999994777, y: 0.726211400000011 },\n              { x: -0.44676059999994777, y: -0.726211400000011 },\n            ]}\n          />\n        </footprint>\n      }\n      cadModel={{\n        objUrl:\n          \"https://modelcdn.tscircuit.com/easyeda_models/download?uuid=973acf8a660c48b1975f1ba1c890421a&pn=C57759\",\n        rotationOffset: { x: 0, y: 0, z: 0 },\n        positionOffset: { x: 0, y: 0, z: 0 },\n      }}\n      schPinSpacing={0.75}\n      schPortArrangement={{\n        leftSide: {\n          direction: \"top-to-bottom\",\n          pins: [1],\n        },\n        rightSide: {\n          direction: \"bottom-to-top\",\n          pins: [2],\n        },\n      }}\n    />\n  )\n}\n\n\n`}\n\n/>\n\nIf you don't specify `supplierPartNumbers`, tscircuit will automatically scan\nfor in-stock parts and select a chip using vendor APIs in the Cloud API using\nthe [platform parts engine](../guides/platform-configuration.md)\n\n### Supported Suppliers\n\nThe following are the supported supplier keys. The list is [maintained here](https://github.com/tscircuit/props/blob/main/lib/common/layout.ts#L56) and you can [request additional suppliers by creating an issue](https://github.com/tscircuit/props/issues/new?template=Blank+issue&title=Supplier%20Request%3A%20)\n\nAvailable supplier keys:\n\n- jlcpcb\n- digikey\n- mouser\n- macrofab\n- pcbway\n- lcsc\n\nYou can also insert custom keys for your organization and they will be copied to\nthe output [Circuit JSON](https://github.com/tscircuit/circuit-json)\n\n\n## Type-safe Chips: Custom Component Hooks\n\nComponent hooks are a great way to improve type safety and simplify the usage\nof your component. A component hook is created with the `createUseComponent`\nfrom `tscircuit` and returns a hook that when used, will generate a component\nwith properties for each pin label.\n\n```tsx\nimport { createUseComponent, type CommonLayoutProps } from \"tscircuit\"\n\ninterface Props extends CommonLayoutProps {\n  name: string\n}\n\n\nconst pinLabels = {\n  pin1: \"VCC\",\n  pin2: \"DISCH\",\n  pin3: \"THRES\",\n  pin4: \"CTRL\",\n  pin5: \"GND\",\n  pin6: \"TRIG\",\n  pin7: \"OUT\",\n  pin8: \"RESET\"\n} as const\n\nexport const A555Timer = (props: Props) => (\n  <chip\n    footprint=\"soic8\"\n    pinLabels={pinLabels}\n    {...props}\n  />\n)\n\nexport const use555Timer = createUseComponent(A555Timer, pinLabels)\n```\n\n:::warning\nMake sure to have `as const` when you're defining your `pinLabels`, if you're\nmissing this the types won't work!\n:::\n\nWhen you use Component Hooks, you get better type checking in your component usage\nbecause all the pin labels are now available on the component!\n\n```tsx\nimport { use555Timer } from \"./a555timer\"\nimport { usePowerRegulator } from \"./power-regulator\"\n\nexport default () => {\n  const U1 = use555Timer(\"U1\")\n  const M1 = usePowerRegulator(\"M1\")\n\n  return (\n    <board width=\"10mm\" height=\"10mm\">\n      <U1 />\n      <M1 />\n\n      <trace from={U1.GND} to=\"net.GND\" />\n      <trace from={U1.VCC} to={M1.V5} />\n    </board>\n  )\n}\n```\n\n\n## Importing Chips from JLCPCB, KiCad or Circuit JSON\n\nThere are a lot of ways to import a chip configuration, each with their own\nguide! This is often much easier and reliable than configuring a chip yourself.\n\n- [Importing Components from JLCPCB](../guides/importing-modules-and-chips/importing-from-jlcpcb.mdx)\n- [Importing Components from KiCad](../guides/importing-modules-and-chips/importing-from-kicad.md)\n\n================\nFile: docs/elements/crystal.mdx\n================\n--- \ntitle: <crystal />\nsidebar_position: 7\n---\n\n## Overview\n\nA crystal oscillator provides a stable clock signal essential for timing applications and microcontroller operations.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"50mm\" height=\"50mm\">\n      <crystal\n        name=\"XT1\"\n        frequency=\"16MHz\"\n        loadCapacitance=\"18pF\"\n        footprint=\"hc49\"\n      />\n    </board>\n  )`}\n/>\n\n\n## Properties\n\n| Property         | Type                  | Description                                                                                           | Example                |\n| ---------------- | --------------------- | ----------------------------------------------------------------------------------------------------- | ---------------------- |\n| `frequency`      | number or string      | The operating frequency of the crystal oscillator.                                                  | `16e6` or `\"16MHz\"`    |\n| `loadCapacitance`| number or string      | The load capacitance required for stable operation.                                                 | `18pF`                 |\n| `pinVariant`     | PinVariant (optional) | Optional property to select a pin configuration variant if multiple options exist.                    | `\"2pin\"`            |\n\n================\nFile: docs/elements/diode.mdx\n================\n---\ntitle: <diode />\n---\n\n## Overview\n\nDiodes are semiconductor devices that allow current to flow primarily in one direction, making them ideal for rectification, signal clipping, and protection against reverse voltage. They are essential in power supply circuits and for protecting sensitive components from voltage spikes.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <diode name=\"D1\" footprint=\"0402\" />\n  )\n`}\n/>\n\nIn this example, the diode is placed on a board using the default footprint \"smd-diode\".\n\n## Properties\n\n| Property         | Type     | Description                            | Example |\n| ---------------- | -------- | -------------------------------------- | ------- |\n| `forwardVoltage` | `number` | The forward voltage drop of the diode. | `0.7V`  |\n\n## Pins\n\nDiodes have two pins:\n\n- `pin1`/`anode`/`pos` - The positive terminal where current enters.\n- `pin2`/`cathode`/`neg` - The negative terminal where current exits.\n\n================\nFile: docs/elements/footprint.mdx\n================\n---\ntitle: <footprint />\n---\nimport CircuitPreview from '@site/src/components/CircuitPreview';\n\n## Overview\n\nWithin a `<footprint />` element you can define PCB elements such as [`<platedhole />`](../footprints/platedhole.mdx)\nor [`<smtpad />`](../footprints/smtpad.mdx).\n\nHere's an example of a chip with a custom footprint:\n\n<CircuitPreview splitView defaultView=\"pcb\" code={`\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <chip\n      name=\"U1\"\n      footprint={\n        <footprint>\n          <platedhole\n            portHints={[\"4\"]}\n            pcbX=\"3.2499299999998357mm\"\n            pcbY=\"-2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"2\"]}\n            pcbX=\"3.2499299999998357mm\"\n            pcbY=\"2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"1\"]}\n            pcbX=\"-3.2499299999999494mm\"\n            pcbY=\"2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <platedhole\n            portHints={[\"3\"]}\n            pcbX=\"-3.2499299999999494mm\"\n            pcbY=\"-2.249932000000058mm\"\n            outerDiameter=\"1.9999959999999999mm\"\n            holeDiameter=\"1.3000228mm\"\n            shape=\"circle\"\n          />\n          <silkscreenpath\n            route={[\n              { x: -2.2743160000001126, y: -2.999994000000015 },\n              { x: 2.274315999999999, y: -2.999994000000015 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -2.999994000000129, y: 1.0999978000000965 },\n              { x: -2.999994000000129, y: -0.999998000000005 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: 3.0999937999998792, y: 1.0279888000000028 },\n              { x: 3.0999937999998792, y: -1.0999977999999828 },\n            ]}\n          />\n          <silkscreenpath\n            route={[\n              { x: -1.99999600000001, y: 2.999994000000015 },\n              { x: 2.274315999999999, y: 2.999994000000015 },\n            ]}\n          />\n        </footprint>\n      }\n      schPortArrangement={{\n        leftSide: {\n          direction: \"top-to-bottom\",\n          pins: [1, 3],\n        },\n        rightSide: {\n          direction: \"bottom-to-top\",\n          pins: [4, 2],\n        },\n      }}\n    />\n  </board>\n)\n`} />\n\n================\nFile: docs/elements/group.mdx\n================\n---\ntitle: <group />\n---\n\n## Overview\n\nA group is the basic container element that can contain other elements.\n\nBy default, a group doesn't have any effect on the circuit.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  showTabs={false}\n  code={`\n  import { sel } from \"tscircuit\"\n\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resistor name=\"R1\" resistance=\"1k\" schX={-2} />\n      <group schY={-3}>\n        <resistor name=\"R2\" resistance=\"1k\" schX={2} />\n        <trace from={sel.R1.pin2} to={sel.R2.pin1} />\n      </group>\n    </board>\n  )\n  `}\n/>\n\n\n## Moving multiple components via a `<group />`\n\n`<group />` elements can be used to move multiple components at once.\n\nIn the example below every schematic symbol inside the `<group />` will be moved\n5mm to the right and 3mm up.\n\n```tsx\n<group schX={5} schY={3}>\n  <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n  <resistor name=\"R2\" resistance=\"1k\" footprint=\"0402\" schY={2} />\n  <resistor name=\"R3\" resistance=\"1k\" footprint=\"0402\" schY={2} />\n</group>\n```\n\nWe can similarly use a `<group />` to move multiple PCB elements at once:\n\n```tsx\n<group pcbX={5} pcbY={3}>\n  <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n  <resistor name=\"R2\" resistance=\"1k\" footprint=\"0402\" pcbY={2} />\n  <resistor name=\"R3\" resistance=\"1k\" footprint=\"0402\" pcbY={2} />\n</group>\n```\n\n================\nFile: docs/elements/hole.mdx\n================\n---\ntitle: <hole />\n---\n\n## Overview\n\nA hole can be used for mounting and doesn't have any conductive properties, for\na hole with a conductive ring of copper see [`<platedhole />`](../footprints/platedhole.mdx).\n\nHoles do not have a schematic representation.\n\nHoles can be used inside of a [`<footprint />`](./footprint.mdx) or\nas a standalone element.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"3d\"\n  code={`export default () => (\n    <hole diameter=\"3mm\" x={10} y={10} />\n  )`}\n/>\n\n================\nFile: docs/elements/led.mdx\n================\n---\ntitle: <led />\n---\n\n## Overview\n\nLight emitting diodes are [diodes](./diode.mdx) that emit light when current\npasses through them. They are commonly used as indicators on a circuit board\nsuch as a \"power on indicator\" or \"data transfer in progress indicator\".\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <led name=\"LED1\" footprint=\"0603\" color=\"red\" />\n  )\n`}\n/>\n\n## Properties\n\n| Property         | Example Value | Description                                                      |\n| ---------------- | ------------- | ---------------------------------------------------------------- |\n| `color`          | `red`         | The color of the LED. `red` LEDs are most common.                |\n| `forwardVoltage` | `1.6V`        | The voltage drop across the LED when forward current is applied. |\n\n### Common LED Footprints\n\nThe following represent the most common footprints for LEDs based on [jlcsearch](https://jlcsearch.tscircuit.com),\nyou can provide these as the `footprint` property to the `led` element e.g. `<led footprint=\"led0603\" />`\n\n| Footprint | ~JLCPCB Popularity |\n| --------- | ------------------ |\n| `led0603` | 37%                |\n| `led0805` | 23%                |\n| `led1206` | 10%                |\n| `led0402` | 4%                 |\n\n## Automatic Part Selection\n\nLEDs are automatically selected according to their color and footprint using\nthe [platform parts engine](../guides/platform-configuration.md)\n\n================\nFile: docs/elements/mosfet.mdx\n================\n---\ntitle: <mosfet />\n---\n\n## Overview\n\nA MOSFET or \"metal-oxide-semiconductor field-effect transistor\" is a type of transistor that is used to control the flow of current through a circuit.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <mosfet\n      name=\"Q1\"\n      channelType=\"n\"\n      mosfetMode=\"depletion\"\n      footprint=\"sot23\"\n    />\n  )\n`}\n/>\n\n## Properties\n\n| Property      | Description                                         | Example       |\n| ------------- | --------------------------------------------------- | ------------- |\n| `channelType` | The type of channel the MOSFET has (`n`, `p`)       | `\"n\"`         |\n| `mosfetMode`  | The mode of the MOSFET (`enhancement`, `depletion`) | `\"depletion\"` |\n\n================\nFile: docs/elements/net.mdx\n================\n---\ntitle: <net />\nsidebar_position: 6.5\n---\n\n## Overview\n\nThe `<net />` element represents a bunch of traces that are all connected. You\nshould use nets for representing power buses such as \"V5\", \"V3_3\" and \"GND\"\n\nWhen using a `<net />`, you're being less specific than \n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <group>\n      <capacitor capacitance=\"1uF\" footprint=\"0603\" name=\"C1\" />\n      <net name=\"V5\" />\n      <trace from=\"net.V5\" to=\".C1 .pos\" />\n    </group>\n  )\n  `}\n/>\n\n\n## Net Properties\n\nNets can have properties that will pass onto any PCB trace within them. The \ntrace properties can be automatically used for autorouting adjustments or to\nvalidate connections (such as validating that a chip is connected to a power\nsource)\n\n| Property | Description |\n| -------- | ----------- |\n| `isForPower`  | The net is used to deliver power (\"V5\", \"V3_3\") |  \n| `isGround` | The net is used as a ground path |\n\n## Implicit Nets\n\nIf you use a net in a [port or net selector](../guides/port-and-net-selectors.md)\ne.g. `\"net.V5\"` and there is not `<net name=\"V5\" />`, then you\n\n================\nFile: docs/elements/pinheader.mdx\n================\n---\ntitle: <pinheader />\n---\n\n## Overview\n\nThe `<pinheader />` element is used to create a male or female pin header\nwith configurable spacing and number of pins.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n## Example\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`export default () => (\n    <pinheader\n      name=\"J1\"\n      pinCount={8}\n      gender=\"male\"\n      pitch=\"2.54mm\"\n      doubleRow={true}\n      showSilkscreenPinLabels={true}\n      pinLabels={[\"VCC\", \"GND\", \"SDA\", \"SCL\", \"MISO\", \"MOSI\", \"SCK\", \"CS\"]}\n      x={10}\n      y={10}\n    />\n  )\n`}\n/>\n\n## Properties\n\n| Property | Type | Default | Description |\n|----------|------|---------|-------------|\n| pinCount | number | (required) | Number of pins in the header |\n| pitch | number \\| string | \"2.54mm\" | Distance between pins |\n| schFacingDirection | \"up\" \\| \"down\" \\| \"left\" \\| \"right\" | \"right\" | Direction the header faces in schematic view |\n| gender | \"male\" \\| \"female\" | \"male\" | Whether the header is male or female |\n| showSilkscreenPinLabels | boolean | false | Whether to show pin labels in silkscreen |\n| doubleRow | boolean | false | Whether the header has two rows of pins |\n| holeDiameter | number \\| string | \"1mm\" | Diameter of the through-hole for each pin |\n| platedDiameter | number \\| string | \"1.7mm\" | Diameter of the plated area around each hole |\n| pinLabels | string[] | undefined | Labels for each pin |\n| facingDirection | \"left\" \\| \"right\" | \"right\" | Direction the header is facing |\n| x | number | 0 | X position of the component |\n| y | number | 0 | Y position of the component |\n| rotation | number | 0 | Rotation of the component in degrees |\n| id | string | auto-generated | Unique identifier for the component |\n\n================\nFile: docs/elements/potentiometer.mdx\n================\n---\ntitle: <potentiometer />\n---\n\n## Overview\n\nA potentiometer is a three-terminal resistor with a sliding or rotating contact\nthat forms an adjustable voltage divider. You can also attach two terminals to\ncreate a variable resistor.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <potentiometer\n        name=\"P1\"\n        maxResistance=\"10k\"\n        footprint=\"pinrow3\"\n      />\n    </board>\n  )\n  `}\n/>\n\n## Variants (two or three terminals)\n\nThe `<potentiometer />` element can be configured with two or three terminals\nusing the `pinVariant` prop.\n\n| Pin Variant | Description |\n| ----------- | ----------- |\n| `two_pin` | Two terminals |\n| `three_pin` | Three terminals |\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <potentiometer\n        name=\"P1\"\n        maxResistance=\"10k\"\n        pinVariant=\"three_pin\"\n        footprint=\"pinrow3\"\n      />\n    </board>\n  )\n  `}\n/>\n\n================\nFile: docs/elements/pushbutton.mdx\n================\n---\ntitle: <pushbutton />\n---\n\n## Overview\n\nPushbuttons a common type of switch normally open momentary switch. They are\ncommonly used as a reset or pairing button.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\";\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <pushbutton\n        name=\"SW1\"\n        footprint=\"pushbutton\"\n      />\n    </board>\n  )\n  \n  `}\n/>\n\n## Pins\n\n| Pin  | Aliases    | Description |\n| ------- | -- |----------- |\n| `1` | `side1` | One of the left side pins  |\n| `2` | `side1` | One of the left side pins |\n| `3` | `side2` | One of the right side pins |\n| `4` | `side2` | One of the right side pins |\n\n:::info\nThe pins are internally connected, so you only need to connect one of the\nleft or right pins.\n:::\n\n## Example: A small keyboard grid of pushbuttons\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  import { grid } from \"@tscircuit/math-utils\"\n\n  export default () => (\n    <board width=\"36mm\" height=\"36mm\">\n      {grid({\n        rows: 3,\n        cols: 3,\n      }).map((cell) => (\n        <pushbutton\n          name={\\`SW\\${cell.index}\\`}\n          footprint=\"pushbutton\"\n          schX={cell.center.x * 2}\n          schY={cell.center.y}\n          pcbX={cell.center.x * 12}\n          pcbY={cell.center.y * 12}\n        />  \n      ))}\n    </board>\n  )\n  `}\n/>\n\n================\nFile: docs/elements/resistor.mdx\n================\n---\ntitle: <resistor />\nsidebar_position: 2\n---\n\n## Overview\n\nA `<resistor />` is an extremely common element of electronic designs. It limits\nthe flow of electricity and is critial to making sure digital signals are\nproperly \"pulled up\" or \"pulled down\" to set their default value as `1` or `0`\n\nA resistor element has two pins and is non-polar, meaning it doesn't matter if\nyou place it on backwards (it resists electricity identically either way!)\n\nWhen specifying a resistor, you'll usually want to give it a footprint string\nsuch as `0402` or `0603` to indicate it's size. You can see the most popular\nresistor sizes for different power ratings at [jlcsearch](https://jlcsearch.tscircuit.com/resistors/list)\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n\nexport default () => (\n    <resistor\n      name=\"R1\"\n      footprint=\"0402\"\n      resistance=\"1k\"\n    />\n)\n\n  `}\n/>\n\n## Pins\n\nA resistor has the following pins and aliases\n\n| Pin # | Aliases | Description |\n| ---------- | ------- | ----------- |\n| pin1 | left, pos | The left side pin in normal orientation |\n| pin2 | right, neg | The right side pin in normal orientation |\n\n:::note\nFor convenience, you can use the `pos` and `neg` aliases for the resistor. This\ncan help to remember which pin is which for the purpose of pulling up or pulling\ndown a signal, but the resistor is non-polar so `pos`/`neg` are meaningless. \n:::\n## Tolerances\n\nResistors can be made to different tolerances. In particular, you might care\nabout the following resistor characteristics:\n\n- **tolerance** - a percentage given with a string, e.g. `tolerance=\"5%\"`. This specifies how accurate the resistance needs to be\n- **powerRating** - a wattage e.g. \"5W\" indicating how much power can transfer through the resistor for normal operation\n- **temperatureOperatingRange** - a string indicating the listed range for the resistor's operating temperature `\"-15F-150F\"`\n\n## Automatic Part Selection\n\nYou generally don't need to specify `supplierPartNumbers` with a resistor, tscircuit\nwill use the [platform parts engine](../guides/platform-configuration.md) to\nautomatically search vendors for a part matching your tolerances.\n\n================\nFile: docs/elements/resonator.mdx\n================\n---\ntitle: <resonator />\n---\n\n## Overview\n\nResonators are common components used to provide a stable frequency reference for\ncircuits. They are often used in clock circuits or as a timing element.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\";\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resonator\n        name=\"X1\"\n        frequency=\"16MHz\"\n        loadCapacitance=\"5pF\"\n        footprint=\"hc49\"\n      />\n    </board>\n  )\n  `}\n/>\n\n================\nFile: docs/elements/subcircuit.mdx\n================\n---\ntitle: <subcircuit />\n---\n\n## Overview\n\nA `<subcircuit />` is a powerful organizational element in tscircuit that\nrepresents a collection of elements that are tightly coupled. Subcircuits are\noften used for a small functional block, such as a voltage regulator.\n\nWithin a subcircuit, you can have a custom autorouter or isolated nets from the\nlarger circuits. You can also re-use reference designators. Your subcircuit is\nessentially isolated from other subcircuits.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <subcircuit name=\"subcircuit1\" schX={-2}>\n        <resistor name=\"R1\" resistance=\"1k\" />\n      </subcircuit>\n      <subcircuit name=\"subcircuit2\" schX={2}>\n        <resistor name=\"R2\" resistance=\"1k\"  />\n      </subcircuit>\n      <trace from=\".subcircuit1 .R1 .pin1\" to=\".subcircuit2 .R2 .pin1\" />\n    </board>\n  )\n  `}\n/>\n\n## Re-using Reference Designators\n\nRe-using reference designators is typically considered a bad practice, but in\ntscircuit reference designators are intelligently prefixed prior to being\nwritten on the silkscreen. This means that you can design your subcircuits\nwithout worrying about whether or not a reference designator has been previously\nused.\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <subcircuit name=\"subcircuit1\" schX={-2}>\n        <resistor name=\"R1\" resistance=\"1k\" />\n      </subcircuit>\n      <subcircuit name=\"subcircuit2\" schX={2}>\n        <resistor name=\"R1\" resistance=\"1k\" />\n      </subcircuit>\n      <trace from=\".subcircuit1 .R1 .pin1\" to=\".subcircuit2 .R1 .pin1\" />\n    </board>\n  )\n  `}\n/>\n\n## Configuring the Autorouter\n\nSubcircuits can have a custom autorouter configuration. This will be inherited\nby any children subcircuits.\n\nTo specify a custom autorouter configuration, just set the `autorouter` property\non a `<subcircuit />` element.\n\n```tsx\n<subcircuit autorouter=\"auto-cloud\">\n  <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n  <resistor name=\"R2\" resistance=\"1k\" footprint=\"0402\" />\n  {/* ... */}\n</subcircuit>\n```\n\nSpecifying custom autorouter settings for subcircuits can be extremely useful\nwhen you have a tricky section of components that have special requirements.\n\nRead more about [the autorouter prop here](./board.mdx#setting-the-autorouter).\n\n================\nFile: docs/elements/switch.mdx\n================\n---\ntitle: <switch />\n---\n\n## Overview\n\nA switch is a mechanical device that can be used to connect or disconnect a\ncircuit.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\";\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <switch name=\"SW1\" type=\"spst\" />\n  )\n  `}\n/>\n\n## Properties\n\n| Property | Type | Description |\n| -------- | -------- | -------- |\n| `type` | `\"spst\"` \\| `\"spdt\"` \\| `\"dpst\"` \\| `\"dpdt\"` | The type of switch |\n| `isNormallyClosed` | `boolean` | Whether the switch is normally closed |\n\n\n## Types of Switches\n\n| Type | Description |\n| ---- | ----------- |\n| `spst` | Single Pole Single Throw - The simplest switch type with one input and one output |\n| `spdt` | Single Pole Double Throw - One input that can be connected to either of two outputs |\n| `dpst` | Double Pole Single Throw - Two separate inputs each connecting to their own output |\n| `dpdt` | Double Pole Double Throw - Two separate inputs that can each connect to either of two outputs |\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <group>\n      <switch name=\"SW1\" type=\"spst\" schX={-1} schY={-1} />\n      <switch name=\"SW1\" type=\"spdt\" schX={1} schY={-1} />\n      <switch name=\"SW3\" type=\"dpst\" schX={-1} schY={1} />\n      <switch name=\"SW4\" type=\"dpdt\" schX={1} schY={1} />\n    </group>\n  )\n  `}\n/>\n\n\n## When to use `<switch />` vs `<pushbutton />`\n\nYou should always use `<pushbutton />` or any more specific switch element\nwhen possible. `<switch />` is a more generic element with less defaults.\n\n================\nFile: docs/elements/trace.mdx\n================\n---\ntitle: <trace />\nsidebar_position: 5\n---\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n## Overview\n\nThe `<trace />` element represents an electrical connection between two or more points in your circuit. Traces can connect components, nets, or specific pins on components.\n\n## Basic Usage\n\nHere's a simple example connecting two components:\n\n<CircuitPreview defaultView=\"pcb\" code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" pcbX={-2} schX={-2} />\n      <capacitor name=\"C1\" capacitance=\"100nF\" footprint=\"0402\" pcbX={2} />\n      <trace\n        from=\".R1 > .pin1\"\n        to=\".C1 > .pin1\"\n      />\n    </board>\n  )\n`} />\n\n## Trace Properties\n\n| Property | Description | Example |\n| -------- | ----------- | ------- |\n| `from` | Starting point of the trace using a [port selector](../guides/port-and-net-selectors.md) | `\".R1 > .pin1\"` |\n| `to` | Ending point of the trace using a [port selector](../guides/port-and-net-selectors.md) | `\".C1 > .pin1\"` |\n| `maxLength` | Maximum length the trace can be (optional) | `\"10mm\"` |\n| `minLength` | Minimum length the trace must be (optional) | `\"5mm\"` |\n| `width` | Width of the trace (optional) | `\"0.2mm\"` |\n\n## Connecting to Nets\n\nTraces can connect to named nets like power and ground:\n\n<CircuitPreview defaultView=\"schematic\" code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n      <trace from=\".R1 > .pin1\" to=\"net.GND\" />\n      <trace from=\".R1 > .pin2\" to=\"net.VCC\" />\n    </board>\n  )\n`} />\n\n## Autorouting\n\nTraces are automatically routed by tscircuit's [autorouting system](./board.mdx#setting-the-autorouter). The autorouter will:\n\n1. Find a path between components that doesn't intersect other traces\n2. Use vias to change layers when needed\n3. Respect any length constraints specified\n4. Try to minimize the number of vias used\n\nYou can customize the autorouting behavior by setting the `autorouter` property on the parent [`<board />`](./board.mdx) or [`<subcircuit />`](./subcircuit.mdx).\n\n## Length Constraints \n\nSometimes you need traces to be exactly a certain length, like for high-speed signals. You can use `maxLength` and `minLength`:\n\n<CircuitPreview defaultView=\"pcb\" code={`\nexport default () => (\n  <board width=\"20mm\" height=\"20mm\">\n    <chip name=\"U1\" footprint=\"soic8\" pcbX={-5} />\n    <chip name=\"U2\" footprint=\"soic8\" pcbX={5} />\n    <trace\n      from=\".U1 > .pin1\"\n      to=\".U2 > .pin1\"\n      maxLength=\"15mm\"\n      minLength=\"12mm\"\n    />\n  </board>\n)\n`} />\n\n## Differential Pairs\n\nFor high-speed signals, you often need pairs of traces to have matched lengths. You can use the `differentialPairKey` property to group traces:\n\n:::info\nThe `differentialPairKey` property is in beta and not available on all autorouters yet!\n:::\n\n<CircuitPreview defaultView=\"pcb\" code={`\n  export default () => (\n    <board width=\"20mm\" height=\"20mm\">\n      <chip name=\"U1\" footprint=\"soic8\" pcbX={-5} />\n      <chip name=\"U2\" footprint=\"soic8\" pcbX={5} />\n      <trace\n        from=\".U1 > .pin1\"\n        to=\".U2 > .pin1\"\n        differentialPairKey=\"pair1\"\n      />\n      <trace\n        from=\".U1 > .pin2\"\n        to=\".U2 > .pin2\"\n        differentialPairKey=\"pair1\"\n      />\n    </board>\n  )\n`} />\n\nThe autorouter will ensure both traces in the pair have the same length.\n\n## Net vs Direct connections\n\nThere are generally two ways that traces are represented on a PCB \"Rats Nest\" \nor on a schematic and they have very different results:\n\n- **Net** - A trace that connects a net to a component pin.\n  - `<trace from=\"net.GND\" to=\".R1 > .pin1\" />`\n- **Direct** - A trace that connects two component pins directly.\n  - `<trace from=\".R1 > .pin1\" to=\".C2 > .pin2\" />`\n\nWhen you specify a trace with a net, the autorouter will look for the best\nplace to tie into the net. This means you're not specifying the exact location\nwhere the trace will go.\n\nWhen using net connections we use a Rats Nest on a PCB view or a net label on a\nschematic view. When you see a dotted line on a Rats Nest, you should think of\nit as a _possible_ connection point, but not necessarily the final place where\nthe autorouter will connect to the net.\n\n================\nFile: docs/elements/transistor.mdx\n================\n---\ntitle: <transistor />\n---\n\n## Overview\n\nA transistor is a three-terminal semiconductor device that can amplify or switch electronic signals. It is a fundamental component in many electronic circuits, including amplifiers, oscillators, and digital logic gates.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <transistor\n      name=\"Q1\"\n      type=\"npn\"\n      footprint=\"sot23\"\n    />\n  )\n`}\n/>\n\nThere are different types of transistors, so where possible you should use the\nmost specific element to represent your use case\n\n- [`<transistor />`](./transistor.mdx) - Generic transistor\n- [`<mosfet />`](./mosfet.mdx) - MOSFET transistor\n\n## Properties\n\n| Property | Description                                                     | Example |\n| -------- | --------------------------------------------------------------- | ------- |\n| `type`   | The type of transistor (`npn`, `pnp`, `mosfet`, `igbt`, `jfet`) | `\"npn\"` |\n\n================\nFile: docs/elements/via.mdx\n================\n---\ntitle: <via />\n---\n\n## Overview\n\nA via is a plated hole that connects different layers of a PCB. Vias are\ncommonly used to route traces between layers and for thermal management.\n\nVias do not have a schematic representation.\n\nYou generally do not need to manually create vias, they will be handled\nautomatically by the [autorouter](./board.mdx#setting-the-autorouter).\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`export default () => (\n    <via\n      fromLayer=\"top\"\n      toLayer=\"bottom\"\n      outerDiameter=\"0.8mm\"\n      holeDiameter=\"0.4mm\"\n      x={10}\n      y={10}\n    />\n  )`}\n/>\n\n## Properties\n\n\n| Property | Type | Default | Description |\n|----------|------|---------|-------------|\n| fromLayer | string | \"top\" | Starting layer for the via |\n| toLayer | string | \"bottom\" | Ending layer for the via |\n| holeDiameter | number \\| string | \"0.4mm\" | Diameter of the plated hole |\n| outerDiameter | number \\| string | \"0.8mm\" | Outer diameter of the copper annular ring |\n| x | number | 0 | PCB X position of the via |\n| y | number | 0 | PCB Y position of the via |\n\n================\nFile: docs/footprints/constraint.mdx\n================\n---\ntitle: <constraint />\n---\n\n## Overview\n\nThe `<constraint />` element is used to enforce geometric relationships between different elements in a PCB footprint. Constraints can set specific distances and alignments, such as center-to-center, edge-to-edge, or ensuring two elements line up along the same axis.\n\nBelow is a reference example that demonstrates how constraints are used within a footprint. This example is part of a test suite to validate that a KeyswitchSocket component is correctly flipped when placed on different layers of a board.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\n  /**\n   * A switch shaft you can use to connect a pluggable Kailh socket.\n   */\n  const KeyswitchSocket = (props: {\n    name: string\n    pcbX?: number\n    pcbY?: number\n    layer?: \"top\" | \"bottom\"\n  }) => (\n    <chip\n      {...props}\n      cadModel={{\n        objUrl: \"/easyeda/C5184526\",\n      }}\n      footprint={\n        <footprint>\n          {/* <silkscreentext text={props.name} /> */}\n          <smtpad\n            shape=\"rect\"\n            width=\"2.55mm\"\n            height=\"2.5mm\"\n            portHints={[\"pin1\"]}\n            layer=\"top\"\n          />\n          <smtpad\n            shape=\"rect\"\n            width=\"2.55mm\"\n            height=\"2.5mm\"\n            portHints={[\"pin2\"]}\n            layer=\"top\"\n          />\n          <hole name=\"H1\" diameter=\"3mm\" />\n          <hole name=\"H2\" diameter=\"3mm\" />\n          <constraint xDist=\"6.35mm\" centerToCenter left=\".H1\" right=\".H2\" />\n          <constraint yDist=\"2.54mm\" centerToCenter top=\".H1\" bottom=\".H2\" />\n          <constraint edgeToEdge xDist=\"11.3mm\" left=\".pin1\" right=\".pin2\" />\n          <constraint sameY for={[\".pin1\", \".H1\"]} />\n          <constraint sameY for={[\".pin2\", \".H2\"]} />\n          <constraint\n            edgeToEdge\n            xDist={(11.3 - 6.35 - 3) / 2}\n            left=\".pin1\"\n            right=\".H1\"\n          />\n        </footprint>\n      }\n    />\n  )\n\n  export default () => (\n    <board width=\"40mm\" height=\"40mm\">\n      <KeyswitchSocket name=\"SW1\" pcbX={-10} pcbY={0} layer=\"top\" />\n      <KeyswitchSocket name=\"SW2\" pcbX={10} pcbY={0} layer=\"bottom\" />\n    </board>\n  )\n\n\n`} />\n\n## Key Constraints Summary\n\n- `<constraint xDist=\"...\" centerToCenter ... />`: Defines a constraint based on the center positions of two elements.\n- `<constraint edgeToEdge xDist=\"...\" ... />`: Sets a fixed distance between the edges of two elements.\n- `<constraint sameY for={[\"...\", \"...\"]} />`: Ensures that multiple elements share the same Y coordinate.\n\nUse these constraints to help align footprint elements consistently across your designs.\n\n================\nFile: docs/footprints/footprint-elements-vs-footprint-strings.mdx\n================\n---\ntitle: Footprint Elements vs Strings\nsidebar_position: 1\n---\n\n================\nFile: docs/footprints/platedhole.mdx\n================\n---\ntitle: <platedhole />\n---\n\n## Overview\n\nThe `<platedhole />` element is used to represent a plated through hole on a PCB.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <chip name=\"U1\" footprint={\n        <footprint>\n          <platedhole\n            pcbX=\"0mm\"\n            pcbY=\"0mm\"\n            shape=\"circle\"\n            holeDiameter=\"1mm\"\n            outerDiameter=\"2mm\"\n            portHints={[\"pin1\"]}\n          />\n        </footprint>\n      } />\n    </board>\n  )\n  `}\n/>\n\n## Plated Hole Shapes\n\nThere are 3 types of plated holes:\n\n- `circle` - A circular plated hole\n- `oval` - An oval plated hole\n- `pill` - A pill-shaped plated hole (rounded rectangle)\n\nEach shape has different properties\n\n## Properties\n\n| Property      | Shape      | Description                                    |\n| ------------- | ---------- | ---------------------------------------------- |\n| holeDiameter  | circle     | The diameter of the inner hole                 |\n| outerDiameter | circle     | The diameter of the outer copper pad           |\n| innerWidth    | oval, pill | The width of the inner hole                    |\n| innerHeight   | oval, pill | The height of the inner hole                   |\n| outerWidth    | oval, pill | The width of the outer copper pad              |\n| outerHeight   | oval, pill | The height of the outer copper pad             |\n| portHints     | all        | Array of port names that this hole connects to |\n| pcbX          | all        | X position of the hole center on the PCB       |\n| pcbY          | all        | Y position of the hole center on the PCB       |\n| name          | all        | Optional name identifier for the plated hole   |\n\n================\nFile: docs/footprints/silkscreenline.mdx\n================\n---\ntitle: <silkscreenline />\n---\n\n## Overview\n\nThe `<silkscreenline />` element creates a line on the silkscreen layer within a footprint.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n  export default () => (\n    <board width=\"50mm\" height=\"50mm\">\n      <footprint>\n        <silkscreenline \n          x1=\"10mm\" \n          y1=\"10mm\" \n          x2=\"40mm\" \n          y2=\"40mm\"\n          strokeWidth=\"0.1mm\"\n        />\n      </footprint>\n    </board>\n  )\n  `}\n/>\n\n## Properties\n\n| Property | Description                                        |\n|----------|----------------------------------------------------|\n| `x1`       | X coordinate of the starting point                 |\n| `y1`       | Y coordinate of the starting point                 |\n| `x2`       | X coordinate of the ending point                   |\n| `y2`       | Y coordinate of the ending point                   |\n| `strokeWidth` | Stroke width of the line                         |\n\nFeel free to experiment with different coordinate values to see how the silkscreen line is rendered.\n\n================\nFile: docs/footprints/silkscreenpath.mdx\n================\n---\ntitle: <silkscreenpath />\n---\n\n## Overview\n\nThe `<silkscreenpath />` element is used to define a custom drawn path on the silkscreen layer.\nIt supports the following properties:\n\n- route: an array of coordinate objects (each with x and y) that define the path.\n- strokeWidth: defines the width of the path's stroke.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n  export default () => (\n    <board width=\"100mm\" height=\"100mm\">\n      <chip name=\"U1\" footprint={\n        <footprint>\n          <silkscreenpath \n            strokeWidth=\"0.5mm\"\n            route={[\n                { x: \"0mm\", y: \"20mm\" },\n                { x: \"-1.53mm\", y: \"19.88mm\" },\n                { x: \"-3.04mm\", y: \"19.52mm\" },\n                { x: \"-4.50mm\", y: \"18.93mm\" },\n                { x: \"-5.88mm\", y: \"18.09mm\" },\n                { x: \"-7.16mm\", y: \"17.04mm\" },\n                { x: \"-8.32mm\", y: \"15.78mm\" },\n                { x: \"-9.33mm\", y: \"14.33mm\" },\n                { x: \"-10.17mm\", y: \"12.72mm\" },\n                { x: \"-10.82mm\", y: \"10.98mm\" },\n                { x: \"-11.27mm\", y: \"9.13mm\" },\n                { x: \"-11.52mm\", y: \"7.23mm\" },\n                { x: \"-11.55mm\", y: \"5.29mm\" },\n                { x: \"-11.37mm\", y: \"3.36mm\" },\n                { x: \"-10.98mm\", y: \"1.47mm\" },\n                { x: \"-10.39mm\", y: \"0mm\" },\n                \n                { x: \"10.39mm\", y: \"0mm\" },\n                { x: \"39.61mm\", y: \"0mm\" },\n                \n                { x: \"39.61mm\", y: \"0mm\" },\n                { x: \"41.08mm\", y: \"0.12mm\" },\n                { x: \"42.59mm\", y: \"0.48mm\" },\n                { x: \"44.05mm\", y: \"1.07mm\" },\n                { x: \"45.43mm\", y: \"1.91mm\" },\n                { x: \"46.71mm\", y: \"2.96mm\" },\n                { x: \"47.87mm\", y: \"4.22mm\" },\n                { x: \"48.88mm\", y: \"5.67mm\" },\n                { x: \"49.72mm\", y: \"7.28mm\" },\n                { x: \"50.37mm\", y: \"9.02mm\" },\n                { x: \"50.82mm\", y: \"10.87mm\" },\n                { x: \"51.07mm\", y: \"12.77mm\" },\n                { x: \"51.10mm\", y: \"14.71mm\" },\n                { x: \"50.92mm\", y: \"16.64mm\" },\n                { x: \"50.53mm\", y: \"18.53mm\" },\n                { x: \"49.94mm\", y: \"20mm\" },\n                \n                { x: \"49.94mm\", y: \"20mm\" },\n                { x: \"0mm\", y: \"20mm\" }\n            ]}\n          />\n        </footprint>\n      } pcbX={-15} />\n    </board>\n  )\n  `}\n/>\n\n## Properties\n\n| Property    | Type   | Description                                                          |\n| ----------- | ------ | -------------------------------------------------------------------- |\n| route       | Array  | An array of objects containing x and y coordinates to define a path. |\n| strokeWidth | String | The width of the drawn path.                                         |\n\nFeel free to experiment with different routes and strokeWidth values.\n\n================\nFile: docs/footprints/silkscreentext.mdx\n================\n---\ntitle: <silkscreentext />\n---\n\n## Overview\n\nThe `<silkscreentext />` element is used to add text to the silkscreen layer within a PCB footprint.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"pcb\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <silkscreentext text=\"Hello, World!\" fontSize=\"1mm\" />\n    </board>\n  )`}\n/>\n\n\n\n## Properties\n\n| Property        | Type   | Description                                                                                                   |\n|-----------------|--------|---------------------------------------------------------------------------------------------------------------|\n| `text`            | string | The text string to display.                                                                                   |\n| `anchorAlignment` | enum   | Alignment of the text. One of \"center\", \"top_left\", \"top_right\", \"bottom_left\", \"bottom_right\". Defaults to \"center\". |\n| `font`            | enum   | Optional. The font type, e.g. `\"tscircuit2024\"`.                                                                |\n| `fontSize`        | length | Optional. The size of the font.                                                                               |\n\n================\nFile: docs/footprints/smtpad.mdx\n================\n---\ntitle: <smtpad />\n---\n\n## Overview\n\nThe `<smtpad />` element is used to represent a surface mount pad.\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n  export default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <chip name=\"U1\" footprint={\n        <footprint>\n          <smtpad\n            pcbX=\"0mm\"\n            pcbY=\"0mm\"\n            layer=\"top\"\n            shape=\"rect\"\n            width=\"5mm\"\n            height=\"5mm\"\n            portHints={[\"pin1\"]}\n          />\n        </footprint>\n      } />\n    </board>\n  )\n  `}\n/>\n\n## SMT Pad Shapes\n\nThere are 3 main types of smtpads:\n\n- `rect` - A rectangular pad\n- `circle` - A circular pad\n- `pill` - A pill-shaped pad\n\nEach smtpad shape has different properties\n\n## Properties\n\n| Property    | Shape        | Description                                                    |\n| ----------- | ------------ | -------------------------------------------------------------- |\n| width       | rect, pill   | The width of the pad                                           |\n| height      | rect, pill   | The height of the pad                                          |\n| radius      | circle, pill | The radius of the pad (for circle) or corner radius (for pill) |\n| ccwRotation | rect         | Counter-clockwise rotation angle in degrees                    |\n| portHints   | all          | Array of port names that this pad connects to                  |\n| pcbX        | all          | X position of the pad center on the PCB                        |\n| pcbY        | all          | Y position of the pad center on the PCB                        |\n| layer       | all          | Which layer the pad is on (\"top\" or \"bottom\")                  |\n\n================\nFile: docs/guides/importing-modules-and-chips/importing-from-circuit-json.mdx\n================\n---\ntitle: Importing from Circuit JSON\n---\n\n## Overview\n\nYou can import [Circuit JSON](https://github.com/tscircuit/circuit-json) into\ntscircuit components.\n\nCircuit JSON is normally an output of tscircuit code, but sometimes it can\nbe a helpful intermediate format so is used to generate tscircuit code.\n\n## via Web\n\n:::note\nTODO we're still writing this section!\n:::\n\n## via CLI\n\n:::note\nTODO we're still writing this section!\n:::\n\n## Programmatically Converting Circuit JSON to tscircuit code\n\nYou can use the [circuit-json-to-tscircuit](https://github.com/tscircuit/circuit-json-to-tscircuit)\nmodule to programmatically convert circuit json into tscircuit code.\n\n================\nFile: docs/guides/importing-modules-and-chips/importing-from-jlcpcb.mdx\n================\n---\ntitle: Importing from JLCPCB\nsidebar_position: 2\n---\n\n## Overview\n\nJLCPCB has a massive component catalog of 3d models and footprints.\n\n## Web Import\n\nYou can import JLCPCB components on [tscircuit.com](https://tscircuit.com). After\nimporting the snippet, it'll be given a package name like `@tsci/YOUR_NAME.CHIP_NAME`\nand available for import from the tscircuit registry.\n\n<figure>\n  <img src=\"/img/tscircuit-new-import-part.png\" />\n  <figcaption>Step 1: Go to `tscircuit.com` and press the \"new\" button</figcaption>\n</figure>\n\n<figure>\n  <img src=\"/img/tscircuit-import-jlcpcb-button.png\" />\n  <figcaption>Step 2: Click \"Import JLCPCB Component\"</figcaption>\n</figure>\n\n<figure>\n  <img src=\"/img/tscircuit-jlcpcb-dialog.png\" />\n  <figcaption>Step 3: Paste in the JLCPCB Part Number</figcaption>\n</figure>\n\n<figure>\n  <img src=\"/img/jlcpcb-part-number.png\" />\n  <figcaption>You can find the JLCPCB Part Number on JLCPCB's website</figcaption>\n</figure>\n\n<figure>\n  <img src=\"/img/example-imported-jlcpcb-component.png\" />\n  <figcaption>An example of an imported JLCPCB component</figcaption>\n</figure>\n\nAfter your component has been added to tscircuit, you can import it as a\n`@tsci/*` import like this:\n\n```tsx\nimport { ESP32_WROOM_32DC } from \"@tsci/AnasSarkiz.ESP32_WROOM_32DC\"\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <ESP32_WROOM_32DC />\n  </board>\n)\n```\n\n\n## CLI Import\n\nTo import using the CLI, run `npm install -g easyeda`. This will give you the\n`easyeda` command line tool. You can then run `easyeda convert` as shown below\n\n```\n# Convert a schematic and footprint for JLCPCB part number C46749 (NE555)\n# to tscircuit component\neasyeda convert -i C46749 -o C46749.tsx\neasyeda convert -i C46749 -t tsx\n```\n\nThis will create a `tsx` file that you can impor.\n\n================\nFile: docs/guides/importing-modules-and-chips/importing-from-kicad.md\n================\n---\ntitle: Importing from KiCad\nsidebar_position: 3\n---\n\n## Overview\n\nYou can import KiCad components or projects into tscircuit.\n\nTo import from KiCad, you should understand the different file formats KiCad\nuses:\n\n- Files for KiCad components\n  - `kicad_mod` - PCB footprint file for a single component\n  - `kicad_sym` - Schematic symbol file for a single component\n- Files for KiCad projects\n  - `kicad_pro` - KiCad project file\n  - `kicad_pcb` - KiCad PCB board file\n  - `kicad_sch` - KiCad Schematic board file\n\n:::info\nWe're still building KiCad import directly into tscircuit.com, stay tuned for\nwhen that's available!\n:::\n\n## Importing KiCad Components\n\nCurrently the easiest way to import KiCad components is to go to [kicad-component.tscircuit.com](https://kicad-component.tscircuit.com/)\nand upload your `kicad_mod` and/or `kicad_sym` file.\n\n### Importing KiCad Components using the CLI\n\nUsing tscircuit's [open-source KiCad component converter](https://github.com/tscircuit/kicad-component-converter),\nwe can convert KiCad files on the command line.\n\nFirst install the component converter:\n\n```bash\nnpm install -g kicad-mod-converter\n```\n\nNext, run the following command to convert your KiCad files:\n\n```bash\n# Convert a directory ./my-footprints.pretty to a tscircuit project\nkicad-mod-converter convert-kicad-directory --input-dir ./my-footprints.pretty --output-dir ./my-tscircuit-footprints\n```\n\n### Importing KiCad Components Programmatically\n\n```bash\nbun add kicad-mod-converter\n```\n\n```tsx\nimport { parseKicadModToCircuitJson } from \"kicad-component-converter\"\nimport { readFileSync } from \"node:fs\"\n\nconst fileContent = readFileSync(\"SW_SP3T_PCM13.kicad_mod\")\nconst circuitJson = await parseKicadModToCircuitJson(fileContent)\n/* [\n *  {\n *    \"type\": \"pcb_smtpad\",\n *    \"x\": 0.345,\n *    ...\n */\n```\n\n[Circuit JSON](https://github.com/tscircuit/circuit-json) can then be converted\ninto regular tscircuit modules using [circuit-json-to-tscircuit](https://github.com/tscircuit/circuit-json-to-tscircuit)\n\n================\nFile: docs/guides/automatic-layout.mdx\n================\n---\ntitle: Automatic Layout\n---\n\n:::warning\nAutomatic layout is in beta! We're changing and improving the layout algorithms,\nif it doesn't work for you stay tuned! Many changes are on the way!\n:::\n\nYou can automatically lay out schematics and PCBs using the `schAutoLayoutEnabled` and\n`pcbAutoLayoutEnabled` props.\n\n## Automatic Schematic Layout\n\nHere's an example of a Pico-driven nine key keyboard with `schAutoLayoutEnabled`:\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n\n<CircuitPreview\n  defaultView=\"schematic\"\n  code={`\n\nimport { SmdDiode } from \"@tsci/seveibar.SmdDiode\"\nimport { Key } from \"@tsci/seveibar.Key\"\nimport { Pico2 } from \"@tsci/seveibar.pico2\"\n\nconst rowToMicroPin = {\n  0: \"GP0\",\n  1: \"GP1\",\n  2: \"GP10\",\n}\nconst colToMicroPin = {\n  0: \"GP19\",\n  1: \"GP17\",\n  2: \"GP5\",\n}\n\nexport default () => (\n  <board width=\"100mm\" height=\"100mm\" schTraceAutoLabelEnabled schAutoLayoutEnabled>\n    <Pico2 name=\"U1\" pcbX={-30} />\n    {grid({ sizeX: 3, sizeY: 3, pitch: 19.05, offset: { x: 20, y: 0 } }).map(\n      ({ x, y, row, col }, index) => {\n        const schOffX = 5 + x/6\n        const schOffY = -y / 8\n        return (\n          <group key={\\`Kgroup\\${index}\\`}>\n            <Key pcbX={x} pcbY={y} schX={schOffX} schY={schOffY + 0.5} name={\\`K\\${index + 1}\\`} />\n            <SmdDiode\n              pcbX={x}\n              pcbY={y - 13}\n              layer=\"bottom\"\n              name={\\`D\\${index + 1}\\`}\n            />\n            <trace from={\\`.D\\${index + 1} .pin1\\`} to={\\`.K\\${index + 1} .pin1\\`} />\n            <trace\n              from={\\`.D\\${index + 1} .pin2\\`}\n              to={\\`.U1 .\\${rowToMicroPin[row]}\\`}\n            />\n            <trace\n              from={\\`.K\\${index + 1} .pin2\\`}\n              to={\\`.U1 .\\${colToMicroPin[col]}\\`}\n            />\n          </group>\n        )\n      }\n    )}\n  </board>\n)\n\nfunction grid(opts: {\n  sizeX: number\n  sizeY: number\n  pitch: number\n  offset?: { x: number; y: number }\n}): Array<{ x: number; y: number; row: number; col: number }> {\n  const { sizeX, sizeY, pitch, offset = { x: 0, y: 0 } } = opts\n  const points: Array<{ x: number; y: number; row: number; col: number }> = []\n  const startX = (-(sizeX - 1) * pitch) / 2\n  const startY = (-(sizeY - 1) * pitch) / 2\n  for (let row = 0; row < sizeY; row++) {\n    for (let col = 0; col < sizeX; col++) {\n      points.push({\n        x: startX + col * pitch + offset.x,\n        y: startY + row * pitch + offset.y,\n        row,\n        col,\n      })\n    }\n  }\n  return points\n}\n\n`}\n\n/>\n\n## Automatic PCB Layout\n\n:::warning\nPCB Autolayout is not currently available but coming soon! If you're interested\nin PCB Autolayout you should [upvote this issue on GitHub](https://github.com/tscircuit/tscircuit/issues/511)\n:::\n\n================\nFile: docs/guides/configuring-chips.mdx\n================\n---\ntitle: Configuring Chips\nsidebar_position: 1.5\n---\n\nimport ChipPage from \"../elements/chip.mdx\"\n\n<ChipPage />\n\n================\nFile: docs/guides/displaying-circuit-json-on-a-webpage.mdx\n================\n---\ntitle: Displaying Circuit JSON on a Webpage\n---\n\n[Circuit JSON](https://github.com/tscircuit/circuit-json) is a universal\nintermediary format for representing an electronic circuit. It contains PCB,\nSchematic, 3D, Bill of Materials and simulation information.\n\ntscircuit code always converts into Circuit JSON, which can be displayed in\nany of our React components\n\n:::tip\nYou can also upload your Circuit JSON to [circuitjson.com](https://circuitjson.com)\nfor a quick preview!\n:::\n\n\n![Circuit JSON Pipeline](../../static/img/circuit-json-explain.png)\n\n## React: Display all available previews with `<CircuitJsonPreview />`\n\nThe `<CircuitJsonPreview />` component is a simple way to display all available\npreviews for a Circuit JSON array. You can use it by installing the `@tscircuit/runframe`\npackage and importing it into your `React` project.\n\n```tsx\nimport { CircuitJsonPreview } from \"@tscircuit/runframe\"\nimport { renderToCircuitJson } from \"lib/dev/render-to-circuit-json\"\n\nexport default () => (\n  <CircuitJsonPreview\n    circuitJson={renderToCircuitJson(\n      <board width=\"10mm\" height=\"10mm\">\n        <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n      </board>,\n    )}\n  />\n)\n```\n\nYou should see something like this:\n\n![RunFrame Preview](../../static/img/runframe-example.png)\n\nFor more examples and usage, check out the [runframe repo](https://github.com/tscircuit/runframe)\nand the [examples directory](https://github.com/tscircuit/runframe/tree/main/examples)!\n\n:::info\nHave tscircuit code and want to skip converting to Circuit JSON? Try using the\n`<RunFrame />` component directly to build your circuit in the browser!\n:::\n\n### React: Running tscircuit code in the browser (no Circuit JSON needed!)\n\nThe `<RunFrame />` component is a simple way to run tscircuit code in the browser.\nRunFrame loads the tscircuit runtime (and all the dependencies to build Typescript\ncode) into a WebWorker and runs the code in the background.\n\nTo use RunFrame, you must provide a `fsMap` object. This object maps file paths\nto file contents. Files inside this \"filesystem map\" can import each other, this\nis super useful when you have many files to import such as a `manual-edits.json`\nfile!\n\n```tsx\nimport { RunFrame } from \"@tscircuit/runframe\"\n\nexport default () => (\n  <RunFrame\n    fsMap={{\n      \"main.tsx\":\n`\ncircuit.add(\n  <board width=\"10mm\" height=\"10mm\">\n    <resistor name=\"R1\" resistance=\"1k\" footprint=\"0402\" />\n    <capacitor name=\"C1\" capacitance=\"1uF\" footprint=\"0603\" pcbX={4} />\n    <trace from=\".R1 .pin1\" to=\".C1 .pin1\" />\n  </board>\n)\n`,\n    }}\n    entrypoint=\"main.tsx\"\n  />\n)\n```\n\nYou can see different examples of how RunFrame looks for different circuits\non the [RunFrame online examples page](https://runframe.vercel.app/)\n\n`<RunFrame />` automatically handles imports from the tscircuit registry\n\n\n\n## Displaying Circuit JSON without React\n\nAre you interested in this? Please [upvote this issue](https://github.com/tscircuit/tscircuit/issues/508)\nso we can prioritize it!\n\n================\nFile: docs/guides/essential-elements.mdx\n================\n---\ntitle: Essential Elements\nsidebar_position: 1\n---\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n## Overview\n\nThere are some essential elements you'll need for almost every circuit you make,\nthis doc gives a brief overview of each of them so you can jump right in and\nget started building electronics!\n\n| Element                                      | Description                                                                                                               |\n| -------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- |\n| [`<board />`](../elements/board.mdx)         | The root element of a circuit, defines the size of the board and settings like the autorouting method that should be used |\n| [`<chip />`](../elements/chip.mdx)           | A packaged integrated circuit (IC).                                                                                       |\n| [`<trace />`](../elements/trace.mdx)         | Represents a connection between different chips.                                                                          |\n| [`<led />`](../elements/led.mdx)             | Light emitting diode, a small light often used to represent power or status indicators                                    |\n| [`<resistor />`](../elements/resistor.mdx)   | Resists the flow of electrical current.                                                                                   |\n| [`<capacitor />`](../elements/capacitor.mdx) | Stores electrical charge. Often used to smooth out voltage fluctuations.                                                  |\n| [`<diode />`](../elements/diode.mdx)         | Allows current to flow in one direction.                                                                                  |\n\n## The Essential Elements\n\n### [`<board />`](../elements/board.mdx)\n\nThe `<board />` element is the root container for your circuit, similar to how `<body />` works in HTML. Every circuit needs a board! You can customize the size using `width` and `height` props, or even create custom board outlines for non-rectangular shapes.\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <resistor resistance=\"1k\" footprint=\"0402\" name=\"R1\" />\n    </board>\n)`\n} />\n\n### [`<chip />`](../elements/chip.mdx)\n\nThe `<chip />` element is the most versatile component in tscircuit - it can represent virtually any packaged electronic component. You specify a footprint and pin labels, and can customize how it appears in both schematic and PCB views. Here's a simple example:\n\n<CircuitPreview defaultView=\"schematic\" code={`\nexport default () => (\n    <board width=\"10mm\" height=\"10mm\">\n      <chip\n        name=\"U1\" \n        footprint=\"soic8\"\n        pinLabels={{\n          pin1: \"VCC\",\n          pin2: \"DISCH\", \n          pin3: \"THRES\",\n          pin4: \"CTRL\",\n          pin5: \"GND\",\n          pin6: \"TRIG\",\n          pin7: \"OUT\",\n          pin8: \"RESET\"\n        }}\n      />\n    </board>\n)`} />\n\nYou can control pin arrangements, add custom footprints, specify internally connected pins, and more. The `<chip />` element is commonly used for ICs, connectors, buttons, and other discrete components.\n\n================\nFile: docs/guides/layout-properties.mdx\n================\n---\ntitle: Using Layout Properties\n---\n\n## Overview\n\nThere are many ways to layout your schematic and PCB with tscircuit including\n[automatic layout](./automatic-layout.mdx) and [manual edits](./manual-edits.mdx). In this\narticle we'll discuss how to programmatically lay out a board using layout properties like\n`schX`/`schY` and `pcbX` and `pcbY`\n\nAll position properties default to `mm` but you can pass a string with any distance\nunit. For example, `pcbX=\"0.1in\"` is the same as `pcbX=\"2.54mm\"`.\n\n\n## PCB Layout Properties\n\nThe following properties can be placed on nearly any tscircuit element to control\nits position on the board:\n\n| Property | Description | Example Value |\n| -------- | ----------- | ------------- |\n| `pcbX`   | Set the center X position of the element | `0` |\n| `pcbY`   | Set the center Y position of the element | `0` |\n| `pcbRotation` | Set the rotation of the element | `\"90deg\"` |\n\nHere's an example of moving a resistor with default properties versus custom\nlayout properties:\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\";\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n    <resistor\n      name=\"R1\"\n      footprint=\"0805\"\n      resistance=\"1k\"\n    />\n)\n\n`} />\n\n<CircuitPreview defaultView=\"pcb\" code={`\n\nexport default () => (\n    <resistor\n      name=\"R1\"\n      footprint=\"0805\"\n      resistance=\"1k\"\n      pcbX=\"3mm\"\n      pcbY=\"2.5mm\"\n      pcbRotation=\"90deg\"\n    />\n)\n\n`} />\n\n:::info\nTo see positions and measure distances in the PCB Viewer, you can press \"d\" on\nyour keyboard to toggle measurement mode.\n\n<figure>\n<img src=\"/img/pcb-dimension-mode.png\" alt=\"PCB Viewer Measurement Mode\" />\n<figcaption>PCB Viewer Measurement Mode, press \"d\" to toggle when using the PCB tool</figcaption>\n</figure>\n\n:::\n\n\n\n## Schematic Layout Properties\n\nThe following properties can be placed on a schematic element to control its position on the board:\n\n| Property | Description | Example Value |\n| -------- | ----------- | ------------- |\n| `schX`   | Set the center X position of the element | `0` |\n| `schY`   | Set the center Y position of the element | `0` |\n| `schRotation` | Set the rotation of the element | `\"90deg\"` |\n\nHere's an example of moving a resistor with default properties versus custom\nschematic layout properties:\n\n<CircuitPreview defaultView=\"schematic\" code={`\n\nexport default () => (\n    <resistor\n      name=\"R1\"\n      footprint=\"0805\"\n      resistance=\"1k\"\n    />\n)\n\n`} />\n\n<CircuitPreview defaultView=\"schematic\" code={`\n\nexport default () => (\n    <resistor\n      name=\"R1\"\n      footprint=\"0805\"\n      resistance=\"1k\"\n      // schX=\"3mm\"\n      // schY=\"2.5mm\"\n      schRotation=\"90deg\"\n    />\n)\n\n`} />\n\n================\nFile: docs/guides/manual-edits.mdx\n================\n---\ntitle: Manual Edits\n---\n\nIt can be cumbersome to programmatically define the locations of every component\non the PCB and schematic, but [automatic layout](./automatic-layout.mdx) can\nbe too uncontrolled. Manual edits allow you to use a schematic or PCB viewer\nto drag and drop components.\n\n:::info\nAre you trying to programmatically define the locations of components? Check out\n[using layout properties](./layout-properties.mdx) instead.\n:::\n\nEvery time you drag a component, a file conventionally called `manual-edits.json`\nis edited with your edits. This manual edits file is imported and can be given\nas the `manualEdits` prop to a `<board />` or `<subcircuit />`\n\n## Creating Manual Edits with a GUI\n\nEach GUI features an \"edit button\" to turn on an editing mode. After you turn\non the editing mode, you can drag and drop components and your edits will\nautomatically edit the `manual-edits.json` file.\n\n### Creating Manual Edits in the Schematic Viewer\n\nIn the top-right corner there is a pencil edit button. This turns on the edit\nmode.\n\n:::note\nTODO insert a video here showing the manual edits in action!\n:::\n\n### Creating Manual Edits in the PCB Viewer\n\nThe PCB Viewer features two edits modes:\n\n- Edit Trace Mode\n- Move Components Mode\n\nYou can find both of them by hovering over the PCB viewer.\n\n:::note\nTODO insert a video here showing the manual edits in action!\n:::\n\n### Troubleshooting manual edits not being applied\n\nUsually if manual edits aren't being applied, it's because you haven't imported\nthe `manual-edits.json` file. On the [tscircuit.com editor](https://tscircuit.com),\nyou'll get a warning that automatically edits your code to insert the import.\n\nIf you're editing locally, add the following lines:\n\n```tsx\nimport manualEdits from \"./manual-edits.json\"\n\nexport default () => (\n  //                                VVVV add this prop!\n  <board width=\"10mm\" height=\"10mm\" manualEdits={manualEdits}>\n    {/* ... */}\n  </board>\n)\n```\n\nIf you're still not seeing your manual edits, select the `manual-edits.json`\nfile from the tscircuit editor or find the file on your filesystem. Make sure\nthat it changes when you drag'n'drop components.\n\n\n## The Manual Edits Format\n\n\nThe manual edits file's format is defined in [this typescript file](https://github.com/tscircuit/props/blob/main/lib/manual-edits/manual_edits_file.ts), it contains 3 main types of edits:\n\n- **pcb_placements** - Component positions on the PCB\n- **manual_trace_hints** - \"Hints\" indicating where PCB traces should go\n- **schematic_placements** - Component positions on the schematic\n\nHere's an example of a manual edits file:\n\n```json\n{\n  pcb_placements: [\n    {\n      \"selector\": \"R1\",\n      \"center\": {\n        \"x\": 0,\n        \"y\": 6.869495369849336\n      },\n      \"relative_to\": \"group_center\",\n      \"_edit_event_id\": \"0.037205222437411756\"\n    }\n  ]\n  manual_trace_hints: []\n  schematic_placements: [\n    {\n      selector: \"R1\",\n      center: { x: 5, y: 5 },\n      relative_to: \"group_center\",\n    },\n    {\n      selector: \"C1\",\n      center: { x: -5, y: -5 },\n      relative_to: \"group_center\",\n    },\n  ]\n}\n```\n\n================\nFile: docs/guides/platform-configuration.md\n================\n---\ntitle: Platform Configuration\n---\n\n## Overview\n\nThe Platform Configuration allows you to change tscircuit behavior to best suite\nthe platform the tscircuit code is running on.\n\nSome use cases:\n\n- Organizations may want to customize the cloud-autorouter to avoid sending sensitive designs outside your company\n- Organizations may want to use their own internal registry for importing circuits instead of [tscircuit.com](https://tscircuit.com)\n- For [autorouting.com](https://autorouting.com), we configure the platform to not perform any autorouting\n\n## Customizing the Platform\n\nAll of the following features of the platform can be configured:\n\n- **partsEngine** - The engine used to automatically find parts matching component specifications\n- **registryApiUrl** - The registry to use, defaults to `https://registry-api.tscircuit.com`. See [Registry API](../web-apis/the-registry-api.md) for more details\n- **cloudAutorouterUrl** - The cloud autorouter to use, defaults to a tscircuit cloud service that uses freerouting\n- Disable specific circuit outputs to optimize build times, such as disabling autorouting\n\n### The Default Platform\n\nThe tscircuit default platform configuration sources parts from multiple vendors\nand uses the tscircuit backend for autorouting and `@tsci/*` imports.\n\nCurrent vendors used for automatic part sourcing:\n\n- [JLCPCB](https://jlcpcb.com)\n- Digikey (coming soon!)\n- Mouser (coming soon!)\n\nFor each vendor, tscircuit populates multiple available chips. This means even\nif tscircuit finds parts for a vendor, you don't have to use that vendor!\n\n## Using your Platform\n\n:::info\nWant more platform features? Tell us about your use case in [this GitHub Discussion!](https://github.com/orgs/tscircuit/discussions/514)\n:::\n\nWhen you initialize a `RootCircuit`, you can provide the platform configuration\nas the `{ platform }` parameter:\n\n```tsx\nimport { RootCircuit } from \"@tscircuit/core\"\n\nconst circuit = new RootCircuit({\n  platform: {\n    registryApiUrl: \"https://my-tscircuit-registry.mycompany.com\",\n  },\n})\n```\n\nThis can also be provided to modules like `@tscircuit/eval` to evaluate tscircuit\ncode:\n\n```tsx\nimport { CircuitRunner } from \"@tscircuit/eval-webworker\"\nimport myPartsEngine from \"./my-parts-engine\"\n\nconst circuitRunner = new CircuitRunner({\n  platform: {\n    partsEngine: getMyPartsEngine,\n  },\n})\n\nawait circuitRunner.execute(`\ncircuit.add(\n  <board width=\"10mm\" height=\"10mm\">\n    <led name=\"LED1\" footprint=\"0603\" color=\"red\" />\n  </board>\n)`)\n\nawait circuitRunner.renderUntilSettled()\n\nconst circuitJson = await circuitRunner.getCircuitJson()\n```\n\n:::info\nInterested in running the entire tscircuit platform privately inside your company?\nWe're happy to help! Reach out to **enterprise@tscircuit.com**\n:::\n\n================\nFile: docs/guides/port-and-net-selectors.md\n================\n---\ntitle: Port and Net Selectors\n---\n\nSelectors are a string used to reference a port, net or any component. They're most\ncommonly used in traces like this:\n\n```tsx\n<trace from=\".R1 > .pin1\" to=\".C1 > .pos\" />\n```\n\nHowever they can also be used anywhere where a port is referenced, for example to indicate what a capacitor should decouple or a resistor should pullup to:\n\n```tsx\n<resistor pullupFor=\".U1 > .GPIO1\" pullupTo=\"net.VCC\" />\n\n<capactor decouplingFor=\".U1 .VCC\" decouplingTo=\"net.GND\" />\n```\n\nSelectors use the same semantics as CSS selectors:\n\n- `>` means \"direct child\"\n- `.` means \"name\" (in CSS, this can be any class name, but in tscircuit components are limited to a single name)\n- `.U1` means \"something with the name `U1`\"\n- `net.GND` means \"a net with the name `GND`\"\n\n## Selectors don't cross subcircuit boundaries unless told to\n\nWhen a selector is specified, it's resolved relative to the\nsubcircuit of the component where it's specified.\n\nThis means within a subcircuit the selector `.U1` will match any component with the name `U1` anywhere in that subcircuit without going into other subcircuits.\n\nSubcircuits can be nested and have names, so you can use this\nto reference components in nested subcircuits:\n\n```tsx\n<subcircuit>\n  <subcircuit name=\"S1\">\n    <resistor name=\"R1\" />\n  </subcircuit>\n  <capacitor name=\"C1\" />\n\n  {/* We must include \".S1\" in the selector to select the resistor from the inner subcircuit */}\n  <trace from=\".S1 .R1 .pin1\" to=\".C1 .pos\" />\n</subcircuit>\n```\n\nBecause subcircuits are isolated from each other, you can\nre-use reference designators in different subcircuits (globally\nunique reference designators are generated on export)\n\n================\nFile: docs/guides/programmatically-building-circuits.md\n================\n---\ntitle: Programmatically Building Circuits\n---\n\nThis guide is about using tscircuit inside of scripts, APIs or inside the browser. Maybe you want to create a website that allows your users drag'n'drop to create custom electronics and turn their designs into real circuits automatically.\n\nFor most users, there is no need to programmatically build circuits, you can use the [command line](../command-line/tsci-dev.md) or the [online editor](../intro/quickstart-web.md) to build and export your circuits into any supported format.\n\nIf you're not using Typescript or prefer a \"zero-installation\" setup, you can fully build your circuits with complex parameters using the [Registry API](../web-apis/the-registry-api.md)\n\n## Using `@tscircuit/core` directly\n\n`@tscircuit/core` is the core library for tscircuit, it converts React code into [Circuit JSON](https://github.com/tscircuit/circuit-json), a universally intermediary format that represents an electronic device.\n\nHere's an example of how to use `@tscircuit/core` directly to build a circuit into Circuit JSON:\n\n```tsx\nimport { RootCircuit } from \"@tscircuit/core\"\n\nconst circuit = new RootCircuit()\n\ncircuit.add(\n  <board width=\"10mm\" height=\"10mm\">\n    <resistor resistance=\"1k\" footprint=\"0402\" name=\"R1\" schX={3} pcbX={3} />\n    <capacitor\n      capacitance=\"1000pF\"\n      footprint=\"0402\"\n      name=\"C1\"\n      schX={-3}\n      pcbX={-3}\n    />\n    <trace from=\".R1 > .pin1\" to=\".C1 > .pin1\" />\n  </board>\n)\n\nawait circuit.renderUntilSettled()\n\nconsole.log(circuit.getCircuitJson())\n```\n\nThis will output a long [Circuit JSON](https://github.com/tscircuit/circuit-json) array that you can convert into many\nother formats or display directly inside a [CircuitJsonPreview](./displaying-circuit-json-on-a-webpage.mdx) component.\n\n## Evaluating Typescript Circuits\n\n`@tscircuit/eval` can be used to evaluate Typescript/React code and\nautomatically import modules from the tscircuit registry.\n\n```tsx\nimport { CircuitRunner } from \"@tscircuit/eval\"\n\nconst circuitRunner = new CircuitRunner()\n\nawait circuitRunner.execute(`\nimport { RedLed } from \"@tsci/seveibar.red-led\"\n\ncircuit.add(\n  <board width=\"10mm\" height=\"10mm\">\n    <RedLed name=\"LED1\" />\n  </board>\n)`)\n\nawait circuitRunner.renderUntilSettled()\n\nconst circuitJson = await circuitRunner.getCircuitJson()\n\n// Display or convert the circuit json to any other format!\n```\n\n### Evaluating tscircuit inside a web worker\n\n```tsx\nimport { createCircuitWebWorker } from \"@tscircuit/eval/webworker\"\n\nconst circuitWebWorker = createCircuitWebWorker()\n\nawait circuitWebWorker.execute(`\nimport { RedLed } from \"@tsci/seveibar.red-led\"\n\ncircuit.add(\n  <board width=\"10mm\" height=\"10mm\">\n    <RedLed />\n  </board>\n)\n`)\n\nawait circuitWebWorker.renderUntilSettled()\n\nconst circuitJson = await circuitWebWorker.getCircuitJson()\n```\n\n## Converting Circuit JSON to other formats\n\nYou can convert [Circuit JSON](https://github.com/tscircuit/circuit-json) to many\nother formats:\n\n- [Gerber files](https://github.com/tscircuit/circuit-json-to-gerber)\n- [Specctra DSN Autorouting files](https://github.com/tscircuit/dsn-converter)\n- [Pick'n'Place Files](https://github.com/tscircuit/circuit-json-to-pnp)\n- [PCB and Schematic SVGs](https://github.com/tscircuit/circuit-to-svg)\n- [Bill of Materials](https://github.com/tscircuit/circuit-json-to-bom)\n- [SPICE netlists and simulations](https://github.com/tscircuit/circuit-json-to-spice)\n\n================\nFile: docs/guides/publishing-modules.md\n================\n---\ntitle: Publishing Modules\nsidebar_position: 6\n---\n\n================\nFile: docs/guides/running-tscircuit-inside-an-iframe.mdx\n================\n---\ntitle: Running tscircuit inside an iframe\n---\n\n## Overview\n\ntscircuit can be evaluated inside an iframe. This makes it easy to embed\nsnippets on a webpage without complex build systems.\n\nHere's an example of an iframe running a tscircuit snippet:\n\nimport { TscircuitIframe } from \"../../src/components/TscircuitIframe\"\n\n<TscircuitIframe\n  fsMap={{\n    \"main.tsx\": `circuit.add(\n      <board width=\"10mm\" height=\"10mm\">\n        <resistor name=\"R1\" footprint=\"0402\" resistance=\"1k\" />\n      </board>\n    )`,\n  }}\n  entrypoint=\"main.tsx\"\n/>\n\n## Running tscircuit inside an iframe\n\nTo run tscircuit inside an iframe, perform the following steps:\n\n1. Add an iframe that points to `\"https://runframe.tscircuit.com/iframe.html\"`\n2. Listen for the `runframe_ready_to_receive` message from the iframe\n3. Send the code you want to run to the iframe via `postMessage`\n\nHere's a fully working example:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>RunFrame Host</title>\n  </head>\n  <body>\n    <iframe\n      id=\"runframe\"\n      src=\"https://runframe.tscircuit.com/iframe.html\"\n      style=\"width: 100%; height: 600px; border: none;\"\n    ></iframe>\n\n    <script>\n      const iframe = document.getElementById(\"runframe\")\n\n      // Listen for ready message from iframe\n      window.addEventListener(\"message\", (event) => {\n        if (event.data?.runframe_type === \"runframe_ready_to_receive\") {\n          // Send circuit configuration\n          iframe.contentWindow.postMessage(\n            {\n              runframe_type: \"runframe_props_changed\",\n              runframe_props: {\n                fsMap: {\n                  \"main.tsx\": `circuit.add(<resistor resistance=\"1k\" />)`,\n                },\n                entrypoint: \"main.tsx\",\n              },\n            },\n            \"*\"\n          )\n        }\n      })\n    </script>\n  </body>\n</html>\n```\n\n## React iframe wrapper for tscircuit\n\nAn iframe wrapper is available to simplify the process of running tscircuit\ninside an iframe. To use it, add the `@tscircuit/runframe` package to your\nproject and use the [`RunFrameWithIframe` component](https://github.com/tscircuit/runframe/blob/main/lib/components/RunFrameWithIframe/RunFrameWithIframe.tsx) like so:\n\n```tsx\nimport { RunFrameWithIframe } from \"@tscircuit/runframe/iframe\"\n\nexport default () => (\n  <RunFrameWithIframe\n    fsMap={{\n      \"main.tsx\": `circuit.add(<resistor resistance=\"1k\" />)`,\n    }}\n    entrypoint=\"main.tsx\"\n  />\n)\n```\n\n================\nFile: docs/guides/understanding-fabrication-files.md\n================\n---\ntitle: Understanding Fabrication Files\n---\n\n## Overview\n\nFabrication files are files that can be uploaded to a fabricator or turn-key\nmanufacturer to get an entire circuit board made. tscircuit includes three\nmain types of files inside our fabrication files `zip`:\n\n- **Gerbers** These represent each copper layer of the PCB. We also include\n  drilling holes and board cutouts\n- **Bill Of Materials CSV**\n- **Pick'n'Place CSV** These\n\n## How to get fabrication files\n\n### Web\n\nOn the web, you can just hit \"Download\" on any circuit, then hit \"Fabrication Files\"\n\n<figure>\n<img src=\"/img/online-editor-download.png\" alt=\"Online Editor Download Button\" />\n<figcaption>Downloading fabrication files from the online editor</figcaption>\n</figure>\n\n### CLI\n\nYou can run [tsci export ./main.tsx --to fabrication-zip](../command-line/tsci-export) to export to a fabrication files zip file containing Gerbers, Bill of Materials and\nthe Pick'n'Place CSV.\n\n## Uploading Fabrication Files\n\n<figure>\n<img className=\"img-rounded\" src=\"/img/jlcpcb-upload.png\" />\n<figcaption>Many fabricators allow you to directly drop fabrication files on their website!</figcaption>\n</figure>\n\n================\nFile: docs/guides/using-sel-references.mdx\n================\n---\ntitle: Using \"sel\" References\n---\n\nThe `sel` object is a special import that allows you to easily reference\ncomponents with a bit more type-safety than a string. It can also be more ergonomic\nthan typing out a [port selector](./port-and-net-selectors.md).\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview defaultView=\"code\" code={`\nimport { sel } from \"tscircuit\"\n\nexport default () => (\n  <board width=\"10mm\" height=\"10mm\">\n    <resistor\n      resistance=\"1k\"\n      footprint=\"0402\"\n      name=\"R1\"\n    />\n    <capacitor\n      capacitance=\"1000pF\"\n      footprint=\"0402\"\n      name=\"C1\"\n    />\n    <trace from={sel.R1.pin1} to={sel.C1.pos} />\n  </board>\n)\n`} />\n\n\nThe `sel` can be thought of as a very large mapping of conventional strings.\n\nHere are some `sel` expressions and their corresponding string:\n\n```tsx\nimport { sel } from \"tscircuit\"\n\nsel.R1.pin1\n// \".R1 > .pin1\"\n\nsel.C1.pos\n// \".C1 > .pos\"\n\nsel.net.GND\n// \"net.GND\"\n\nsel.U1.GPIO1\n// \".U1 > .GPIO1\"\n```\n\nSo `sel` is really just a slightly more type-safe, conventional way of writing\n[port selectors](./port-and-net-selectors.md). Where possible, it's much better to use [component hooks](../elements/chip.mdx#type-safe-chips-custom-component-hooks)\nbecause they can guarantee more type-safety and have the exact pins that a chip\nsupports.\n\n================\nFile: docs/guides/using-tscircuit-without-react.mdx\n================\n---\ntitle: Using tscircuit without React\n---\n\n{/* tscircuit uses React by default for strong guarantees about how\ncomponents are imported and used, but you can also use tscircuit\nwithout react. */}\n\n:::tip\nIf you're interested in using tscircuit without react, please let us know\nby [upvoting this issue!](https://github.com/tscircuit/tscircuit/issues/508)\n:::\n\n:::info\nAre you interested in using tscircuit inside an iframe? Check out [this article](./running-tscircuit-inside-an-iframe.mdx)\n:::\n\n================\nFile: docs/intro/installation.md\n================\n---\ntitle: Installation\nsidebar_position: 2\n---\n\n## Dependencies\n\nTo use tscircuit, you'll need to have [npm](https://npmjs.com) or [bun](https://bun.sh) installed. We recommend using [bun](https://bun.sh) for its speed and ease of use.\n\n## Installing tscircuit\n\nTo install tscircuit's command line tool, just run:\n\n```bash\nnpm install -g tscircuit\n\n# or\n\nbun install --global tscircuit\n```\n\nThis will install a `tsci` command globally!\n\n:::info\nIf you're using [tscircuit online](https://tscircuit.com), you can skip installation. tscircuit is fully-featured and usable online!\n:::\n\nYou can test it out by running `tsci --help`!\n\n```bash\ntsci --help\n\nUsage: tsci [options] [command]\n\nCLI for developing tscircuit snippets\n\n# Options:\n#   -V, --version            output the version number\n#   -h, --help               display help for command\n\n# Commands:\n#   init                     Initialize a new TSCircuit project in the current directory\n#   dev [options] [file]     Start development server for a snippet\n#   clone <snippet>          Clone a snippet from the registry\n#   auth                     Login/logout\n#   login                    Login to tscircuit registry\n#   config                   Manage tscircuit CLI configuration\n#   export [options] <file>  Export tscircuit code to various formats\n#   help [command]           display help for command\n```\n\nYou can also run `tsci` without any arguments to start the interactive CLI.\n\n```bash\ntsci\n\n# ? Choose command âº\n# â¯   tsci init - Initialize a new TSCircuit project in the current directory\n#     tsci dev - Start development server for a snippet\n#     tsci clone - Clone a snippet from the registry\n#     tsci auth - Login/logout\n#     tsci login - Login to tscircuit registry\n#     tsci config - Manage tscircuit CLI configuration\n#     tsci export - Export tscircuit code to various formats\n```\n\n### Creating a new project\n\nThe easiest way to create a template project is to use `tsci init` inside a project directory.\n\n```bash\nmkdir my-project\n\ncd my-project\n\ntsci init\n```\n\nThis will bootstrap a fresh tscircuit project! Read more about\nstarting the development server and exporting files in our\n[Quickstart CLI Guide](./quickstart-cli.md).\n\n## Installing `tscircuit` per project\n\nYou can install `tscircuit` on a per-project basis by installing it as a dev dependency.\n\n```bash\nnpm add -D tscircuit\n\n# or\n\nbun add -D tscircuit\n```\n\n## Next Steps\n\nNow that you've installed tscircuit, you can start developing your first electronic device!\n\n- [Quickstart CLI Guide](./quickstart-cli.md)\n- [Understanding essential tscircuit elements](../guides/essential-elements.mdx)\n- [What are electronics made of?](../building-electronics/what-are-electronics-made-of.mdx)\n\n================\nFile: docs/intro/quickstart-cli.md\n================\n---\ntitle: Quickstart CLI\nsidebar_position: 4\n---\n\n## Install the tscircuit CLI\n\nYou can install the tscircuit CLI by running `npm install -g tscircuit`.\n\n## Create a new Project\n\nFirst, create a new tscircuit project by running `tsci init`. This will create a new directory with all the necessary files to get started:\n\n![tsci init result](../../static/img/tsci-init.png)\n\n## Run the Development Server\n\nNext, start the development server by running `tsci dev`. This will start a local server that automatically rebuilds your circuit when you make changes:\n\n![tsci dev result](../../static/img/tsci-dev.png)\n\nGo to https://localhost:3020. You'll can now see PCB, Schematic and 3D views of your circuit, which update in real-time as you make changes to your code.\n\n![browser](../../static/img/pcb-runframe.png)\n\n## Pushing to the tscircuit Registry\n\n<!-- TODO -->\n\nThis section is coming soon!\n\n## Exporting to SVGs, PDF, or Fabrication Files\n\n<!-- TODO -->\n\nThis section is coming soon!\n\n================\nFile: docs/intro/quickstart-web.md\n================\n---\ntitle: Quickstart Web\nsidebar_position: 3\n---\n\nYou can use tscircuit online without installing anything on [tscircuit.com](https://tscircuit.com)!\n\n## Using the Online Editor\n\nThe [tscircuit online editor](https://tscircuit.com/editor) is a full Typescript editor with syntax highlighting, autocomplete, type-checking and tools for importing snippets and configuring chips.\n\nThere are two types of projects you can create in the online editor.\n\n- **board**: a fully-functional electronic device that you can order\n- **module**: a reusable component, usually a specific chip or subcircuit, that you can use across many boards or to break up a complex board into smaller, more manageable pieces.\n\nTo get started, let's create a simple board.\n\nYou can use the \"New\" button on [tscircuit.com](https://tscircuit.com) and select\n\"board\" to open the editor with a blank board:\n\n<img className=\"img-rounded img-400\" src=\"/img/new-board.png\" />\n\nThe editor will open with a template board that looks like this:\n\n<img className=\"img-rounded img-400\" src=\"/img/editor-with-template-board-3d.png\" />\n\nYou can now edit the board by adding or removing elements! Check out the\n[essential elements guide](../guides/essential-elements.mdx) to learn more about\nthe available elements. If you've already got an idea of what you want to build,\ntry breaking down the problem into modules using our [designing electronics from scratch guide](../building-electronics/designing-electronics-from-scratch.md)\n\nAfter you make a change, click the \"Run\" button to see your changes applied. You\ncan use the PCB, Schematic, and 3D views to make sure everything is correctly\naligned.\n\nWhen you're ready to manufacture your board, click the \"Download\" button to\ndownload [fabrication files.](../guides/understanding-fabrication-files.md)\n\n<img className=\"img-rounded img-400\" src=\"/img/online-editor-download.png\" />\n\nWhen you're ready to order your board, check out the [ordering prototypes guide](../building-electronics/ordering-prototypes.mdx). You can\nelectronics fully assembled and ready to use from the many services that accept\nour standard fabrication files.\n\n## Using the AI Assistant\n\nOur AI assistant is available in beta but is undergoing a big overhaul. We'll update this section when we're happy with it!\n\n================\nFile: docs/intro/what-is-tscircuit.mdx\n================\n---\ntitle: What is tscircuit?\nslug: /\nsidebar_position: 1\n---\n\ntscircuit is an open-source React/Typescript electronics toolchain and ecosystem\nfor creating, previewing, simulating and manufacturing Printed Circuit Boards\n(PCBs).\n\nReact and Typescript are standard tools that revolutionized the web development\necosystem. tscircuit combines the powerful static analysis of Typescript with\nthe modular component system of React to make developing electronics faster,\neasier and more automated.\n\nHere's an example of a basic tscircuit electronic device, it's the USB\nflashlight that we make in [this tutorial](../tutorials/building-a-simple-usb-flashlight.md).\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n<CircuitPreview defaultView=\"3d\" code={`\nimport { usePushButton } from \"@tsci/seveibar.push-button\"\nimport { useUsbC } from \"@tsci/seveibar.smd-usb-c\"\n\nexport default () => {\n  const USBCPort = useUsbC(\"USBC\")\n  const Button = usePushButton(\"SW1\")\n  return (\n    <board width=\"12mm\" height=\"30mm\">\n      <USBCPort\n        GND1=\"net.GND\"\n        GND2=\"net.GND\"\n        VBUS1=\"net.VBUS\"\n        VBUS2=\"net.VBUS\"\n        pcbY={-10}\n        schX={-4}\n      />\n      <led name=\"LED\" color=\"red\" footprint=\"0603\" pcbY={12} schY={2} />\n      <Button pcbY={0} pin2=\".R1 > .pos\" pin3=\"net.VBUS\" schY={-2} />\n      <resistor name=\"R1\" footprint=\"0603\" resistance=\"1k\" pcbY={7} />\n      <trace from=\".R1 .neg\" to=\".LED .pos\" />\n      <trace from=\".LED .neg\" to=\"net.GND\" />\n    </board>\n  )\n}\n`} />\n\nThis small snippet of code helps demonstrate the power of tscircuit. From those\n40 lines, we were able to create a full PCB, Schematic and 3D preview. Not only\nthat, but we can export this circuit to [Fabrication Files](../guides/understanding-fabrication-files)\nand get it fabricated and assembled. In fact we did!\n\nimport usbcflashlight from \"@site/static/img/usbcflashlight_20250123_1816894.jpg\"\n\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 18 }}>\n<img style={{maxWidth: 400}} src={usbcflashlight} alt=\"USB Flashlight PCB After Manufacturing\" />\n</div>\n\nIt may not seem like much, but tscircuit just handled a _lot_ of work for us!\n\n- Automatic Part Selection and Bill of Materials Generation\n- Autorouting\n- Schematic and PCB Layout\n- 3D Model Generation\n- Fabrication File Generation\n\n...and it ran completely in our browser!\n\ntscircuit isn't limited to simple circuits like this. You can keep adding\nelements, creating modules and combining them to create more and more complex\ncircuits. Here's an example of a [simple 3x3 macrokeypad based on the PICO2!](https://tscircuit.com/seveibar/nine-key-keyboard)\n\n\n<CircuitPreview code={`\nimport NineKeyKeyboard from \"@tsci/seveibar.nine-key-keyboard\"\n\nexport default () => <NineKeyKeyboard />\n`} />\n\nWe ordered this one too!\n\nimport macrokeypad from \"@site/static/img/macrokeypad.png\"\n\n<div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: 24 }}>\n<img style={{maxHeight: 400}} src={macrokeypad} alt=\"3x3 Macrokeypad\" />\n</div>\n\nDepending on your experience level with electronics, you may want to get started\nwith any of the following resources:\n\n- [Learn about the Essential tscircuit Elements](../guides/essential-elements)\n- [How do I design an electronic device from scratch with tscircuit?](../building-electronics/designing-electronics-from-scratch)\n- [Install tscircuit locally](./installation.md)\n- [Explore tscircuit electronics online](https://tscircuit.com)\n\n================\nFile: docs/tutorials/building-a-simple-usb-flashlight.md\n================\n---\ntitle: Building a Simple USB Flashlight\n---\n\n================\nFile: docs/web-apis/autorouting-api.mdx\n================\n---\ntitle: Autorouting API\n---\n\nimport CircuitPreview from \"@site/src/components/CircuitPreview\"\n\n## Overview\n\ntscircuit allows heavy customization of the autorouting process. In tscircuit\nyou can use local or cloud autorouters, use different autorouters for different\nsubcircuits, and disable autorouting entirely.\n\nThis page provides details on the autorouting cloud API so you can import your\nown cloud autorouter.\n\n## Using Custom Autorouters\n\nHere's an example of how a customer autorouter can be configured with tscircuit:\n\n<CircuitPreview defaultView=\"pcb\" code={`\n  export default () => (\n    <board\n      width=\"20mm\"\n      height=\"20mm\"\n      autorouter={{\n        serverUrl: \"https://registry-api.tscircuit.com\",\n        serverMode: \"job\",\n        inputFormat: \"simplified\",\n      }}\n    >\n      <chip name=\"U1\" footprint=\"soic8\" pcbX={5} pcbY={0} />\n      <resistor\n        name=\"R1\"\n        pcbX={-5}\n        pcbY={0}\n        resistance={100}\n        footprint=\"0402\"\n      />\n      <trace from=\".U1 > .pin1\" to=\".R1 > .pin1\" />\n    </board>\n  )\n`} />\n\n### The Autorouter Object\n\nThe autorouter object is used to configure the autorouter. The following properties are supported:\n\n- `serverUrl`: The URL of the autorouter server.\n- `serverMode`: [`job`]( or `solve-endpoint`\n- `inputFormat`: The format of the input to the autorouter server.\n\n## Input and Output Formats\n\n### Simplified Input/Output\n\nThe `simplified` input format is simple to build an autorouter for. It contains\na JSON object with the desired connections to make and the obstacles the algorithm must\navoid to solve the routing problem.\n\nWhen using the `simplified` input format, the `/autorouting/jobs/create` and/or `/autorouting/solve`\nendpoint must accept a `input_simple_route_json` file with the following interface:\n\n```tsx\ninterface SimpleRouteJson {\n  layerCount: number\n  minTraceWidth: number\n  obstacles: Obstacle[]\n  connections: Array<SimpleRouteConnection>\n  bounds: { minX: number; maxX: number; minY: number; maxY: number }\n}\n\ninterface Obstacle {\n  type: \"rect\"\n  layers: string[]\n  center: { x: number; y: number }\n  width: number\n  height: number\n  connectedTo: string[]\n}\n\ninterface SimpleRouteConnection {\n  name: string\n  pointsToConnect: Array<{ x: number; y: number; layer: string }>\n}\n```\n\nHere's an example of a `SimpleRouteJson` object:\n\n```json\n{\n  \"layerCount\": 2,\n  \"minTraceWidth\": 0.2,\n  \"obstacles\": [\n    {\n      \"type\": \"rect\",\n      \"layers\": [\"top\"],\n      \"center\": { \"x\": 30, \"y\": 25 },\n      \"width\": 10,\n      \"height\": 8,\n      \"connectedTo\": [\"power\"]\n    },\n    {\n      \"type\": \"rect\",\n      \"layers\": [\"bottom\"],\n      \"center\": { \"x\": 70, \"y\": 25 },\n      \"width\": 12,\n      \"height\": 6,\n      \"connectedTo\": [\"ground\"]\n    }\n  ],\n  \"connections\": [\n    {\n      \"name\": \"power_net\",\n      \"pointsToConnect\": [\n        { \"x\": 10, \"y\": 10, \"layer\": \"top\" },\n        { \"x\": 90, \"y\": 40, \"layer\": \"bottom\" }\n      ]\n    },\n    {\n      \"name\": \"ground_net\",\n      \"pointsToConnect\": [\n        { \"x\": 20, \"y\": 20, \"layer\": \"top\" },\n        { \"x\": 80, \"y\": 30, \"layer\": \"top\" }\n      ]\n    }\n  ],\n  \"bounds\": {\n    \"minX\": 0,\n    \"maxX\": 100,\n    \"minY\": 0,\n    \"maxY\": 50\n  }\n}\n```\n\nWhen in `simplified` mode you should respond with an\n`output_simple_route_json` object that adds a `traces` field to the original\ninput object.\n\n```json\n{\n  \"output_simple_route_json\": {\n    // ...the original input object fields\n    \"traces\": [\n      {\n        \"type\": \"pcb_trace\",\n        \"pcb_trace_id\": \"trace_1\",\n        \"route\": [\n          {\n            \"route_type\": \"via\",\n            \"x\": 45,\n            \"y\": 25,\n            \"from_layer\": \"top\",\n            \"to_layer\": \"bottom\"\n          },\n          {\n            \"route_type\": \"wire\",\n            \"x\": 45,\n            \"y\": 25,\n            \"width\": 0.2,\n            \"layer\": \"bottom\"\n          },\n          {\n            \"route_type\": \"wire\",\n            \"x\": 60,\n            \"y\": 35,\n            \"width\": 0.2,\n            \"layer\": \"bottom\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\nThe `traces` field should match this type:\n\n```tsx\ntype SimplifiedPcbTraces = Array<{\n  type: \"pcb_trace\"\n  pcb_trace_id: string\n  route: Array<\n    | {\n        route_type: \"wire\"\n        x: number\n        y: number\n        width: number\n        layer: string\n      }\n    | {\n        route_type: \"via\"\n        x: number\n        y: number\n        to_layer: string\n        from_layer: string\n      }\n  >\n}>\n```\n\n\n### Circuit JSON Input/Output\n\nWhen using `inputFormat: \"circuit_json\"` you the API must accept `{ input_circuit_json }` and\nrespond with PCB traces in the format `{ output_pcb_traces }` that can be concatenated to the Circuit JSON to complete the circuit.\n\n## Choosing a `serverMode`\n\nWhen you're implementing the autorouter API, you can choose to implement either\nthe `job` API (recommended) or the `solve-endpoint` API. The `solve-endpoint` is easier because\nit's a single endpoint, but has many limitations because it must perform the\nautorouting in the lifecycle of a single request.\n\nWhen defining your autorouter object, you can choose the `serverMode` and `inputFormat`\nto correspond to what you've implemented.\n\n## The `solve-endpoint` API\n\n| Endpoint |  Description |\n| -------- | ----------- |\n| `/autorouting/solve` | Takes autorouting input and returns the solved routes | \n\n### `solve-endpoint` with `simplified` input\n\n```\nPOST /autorouting/solve\n\n{\n  \"input_simple_route_json\": {\n    // ...\n  }\n}\n\nRESPONSE:\n\n{\n  \"output_simple_route_json\": {\n    // ...\n  }\n}\n```\n\n### `solve-endpoint` with `circuit_json` input\n\n```\nPOST /autorouting/solve\n\n{\n  \"input_circuit_json\": {\n    // ...\n  }\n}\n\nRESPONSE:\n\n{\n  \"output_pcb_traces\": [\n    {\n      \"type\": \"pcb_trace\",\n      \"pcb_trace_id\": \"trace_1\",\n      \"route\": [\n        // ...\n      ]\n    }\n  ]\n}\n```\n\n## The `job` API\n\nThe `job` autorouting API allows you to perform long-running autorouting jobs for\nlarge circuits. When using the `job` API, you must use the `\"circuit_json\"` input format.\n\n| Endpoint |  Description |\n| -------- | ----------- |\n| `/autorouting/jobs/create` | Create the autorouting job | \n| `/autorouting/jobs/get`    | Get the status of the autorouting job |\n| `/autorouting/jobs/cancel` | Cancel the autorouting job |\n| `/autorouting/jobs/get_output` | Get the solved routes from a completed autorouting job |\n\n:::info\nHere's the [source code](https://github.com/tscircuit/core/blob/main/lib/components/primitive-components/Group/Group.ts#L232) in tscircuit core where the `job` API is used to autoroute a circuit. You can\nsee that each endpoint is called in order\n:::\n\n```\nPOST /autorouting/jobs/create\n{\n  \"input_simple_route_json\": {\n    // ...\n  },\n  \"autostart\": true\n}\n\nRESPONSE:\n\n{\n  \"autorouting_job\": {\n    \"autorouting_job_id\": \"1234567890\",\n    // ...\n  }\n}\n\n\n\nGET /autorouting/jobs/get?autorouting_job_id=1234567890\n\nRESPONSE:\n\n{\n  \"autorouting_job\": {\n    \"is_running\": false,\n    \"is_finished\": true,\n    // ...\n  }\n}\n\n\nGET /autorouting/jobs/get_output?autorouting_job_id=1234567890\n\nRESPONSE:\n\n{\n  \"autorouting_job_output\": {\n    \"output_pcb_traces\": [\n      // ...\n    ]\n  }\n}\n```\n\n## Additional Configuration\n\nAdditional configuration parameters can be passed to either the `/autorouting/jobs/create`\nendpoint or the `/autorouting/solve` endpoint to configure the autorouter.\n\n| Parameter | Example Value | Description |\n| --------- | ------------- | ----------- |\n| `display_name` | `\"Nine-key Macropad\"` | A display name for the autorouting job. Useful for debugging! |\n| `provider` | `\"freerouting\"` | The autorouting algorithm to use |\n| `subcircuit_id` | `\"subcircuit_source_group_1\"` | To support subcircuit autorouting, you must accept this parameter and only solve for the subset of routes within the subcircuit. |\n\n================\nFile: docs/web-apis/the-registry-api.md\n================\n---\ntitle: Registry API\nsidebar_position: 1\n---\n\nThe tscircuit Registry API is an extension of the NPM Registry API that allows for additional features, such as building Circuit JSON in the cloud, automatic bundling to ESM and CommonJS, and more versioning automations.\n\n## Using the tscircuit NPM Registry\n\nThe [regular public NPM registry API](https://github.com/npm/registry/blob/main/docs/REGISTRY-API.md) is available via `npm.tscircuit.com`. You can install endpoints from this registry\nby adding the following line to your `.npmrc` (or in\nany project with a `package.json` file)\n\n```\n@tsci:registry=https://npm.tscircuit.com\n```\n\nThis line says \"any package starting with @tsci should\ngo to the tscircuit registry instead of the npm registry\"\n\nSo you can now do `bun add @tsci/seveibar.usb-c-flashlight` to install that\ncircuit to your npm project!\n\n## tscircuit Package Format\n\nEvery tscircuit package is in the format `@tsci/<author>.<package_name>` to\navoid conflicts with other npm packages.\n\n## Advanced Bundling Endpoints\n\ntscircuit runs an ESM and CJS bundling service, you can use these\nservices to get a bundled version of any circuit, this is great\nfor dynamic loading and execution, e.g. we use it in our [tscircuit/import](https://github.com/tscircuit/import) module!\n\n## Advanced Registry Endpoints\n\nYou can use your tscircuit CLI token to use the advanced API at `https://registry-api.tscircuit.com`.\n\nYou can get a tscircuit auth token with `tsci auth print-token`. After you get this token, you just need to add the `Authorization: Bearer ${token}` header to each API request.\n\nThe following endpoints are available:\n\n| Endpoint                   | Purpose                                                      |\n| -------------------------- | ------------------------------------------------------------ |\n| `/package_files/list`      | List all the files in a package                              |\n| `/package_files/create`    | Add a file to a package                                      |\n| `/package_files/download`  | Download a file from a package                               |\n| `/packages/search`         | Search for a package                                         |\n| `/packages/list`           | List your packages                                           |\n| `/package_releases/create` | Create a new release (version) of a package                  |\n| `/package_releases/update` | Update a package release, e.g. to lock it from modifications |\n| `/package_releases/get`    | Get a package release                                        |\n| `/package_releases/list`   | List package releases for a package                          |\n\nMore information about our Advanced Registry API is coming soon, including a full OpenAPI specification!\n\n## Advanced Autorouting Endpoints\n\nYou can also use the registry to perform autorouting jobs for a\n[Circuit JSON](https://github.com/tscircuit/circuit-json) file.\n\n| Endpoint                       | Purpose                              |\n| ------------------------------ | ------------------------------------ |\n| `/autorouting/jobs/create`     | Create a new autorouting job         |\n| `/autorouting/jobs/get`        | Get the status of an autorouting job |\n| `/autorouting/jobs/get_output` | Get the output of an autorouting job |\n\n================\nFile: README.md\n================\n# [docs.tscircuit.com](https://docs.tscircuit.com)\n\nThis website is built using [Docusaurus](https://docusaurus.io/), a modern static website generator.\n\nRun `bun i` and `bun run start` to start a local development server.\n\n\n\n================================================================\nEnd of Codebase\n================================================================\n";